<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Marie</title>
	<link>http://mariehogebrandt.se</link>
	<description>Developer, Role player, Idealist</description>
	<pubDate>Fri, 17 Mar 2017 12:09:38 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://mariehogebrandt.se</wp:base_site_url>
	<wp:base_blog_url>http://mariehogebrandt.se</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[webmaster]]></wp:author_login><wp:author_email><![CDATA[webmistress@melindrea.net]]></wp:author_email><wp:author_display_name><![CDATA[webmaster]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[marie]]></wp:author_login><wp:author_email><![CDATA[iam@mariehogebrandt.se]]></wp:author_email><wp:author_display_name><![CDATA[Marie]]></wp:author_display_name><wp:author_first_name><![CDATA[Marie]]></wp:author_first_name><wp:author_last_name><![CDATA[Hogebrandt]]></wp:author_last_name></wp:author>


	

	<item>
		<title>Finally live</title>
		<link>http://mariehogebrandt.se/articles/finally-live/</link>
		<pubDate>Sat, 29 Jun 2013 12:53:35 +0000</pubDate>
		<dc:creator><![CDATA[webmaster]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=948</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Finally! Site is live!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>948</wp:post_id>
		<wp:post_date><![CDATA[2013-06-29 14:53:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-29 12:53:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[finally-live]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-status"><![CDATA[Status]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>It&#039;s a miracle!</title>
		<link>http://mariehogebrandt.se/articles/its-a-miracle/</link>
		<pubDate>Sat, 29 Jun 2013 14:06:21 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=954</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I've managed to actually go live with my own project, without it being sidetracked into oblivion!</p>

<p>This is my first post on MarieHogebrandt.se. It is my intention to expand on this site, but the very first thing that needs to be done is honestly to take that step.</p>

<p>You see, I am a bit of a perfectionist. When it comes to my own work, I will work on it, and I get all these awesome ideas, and then time runs away from me, and suddenly I've spent three months procrastinating. This time, however, I have decided to do it different. I will launch <strong>before</strong> everything is done, once enough of it is done.</p>

<p>After all, what will this be used for?</p>

<dl>
<dt>Posts/articles on various topics, mainly computer science</dt>
<dd>These need a page for viewing all posts, and viewing single posts, as well as possibly/probably (either or — haven't decided yet) some kind of commentary field, though that can wait</dd>

<dt>Information about me</dt>
<dd>Requires a page much like the posts/articles, but certainly without comments</dd>

<dt>Characters</dt>
<dd>As the first step, it's quite enough to make them just normal pages, with one page to link to all of them</dd>
</dl>

<h2>Future plans?</h2>

<ul>
<li>Create actual Custom Post Types for my characters, as well as a better landing page for them</li>
<li>Two languages: I really want this in both English and Swedish. I'm starting in English since I have the possibility of a broader audience in English</li>
<li>Resumé on the site, preferably with a way to render a PDF downloadable based on the latest version</li>
<li>Tutorials, not just as articles (will then need to be moved from posts, but I'm surprisingly okay with this!)</li>
<li>I'm aiming for posting/writing one piece of content at least every other week</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[A beginning of a new page, with a plan for the future.]]></excerpt:encoded>
		<wp:post_id>954</wp:post_id>
		<wp:post_date><![CDATA[2013-06-29 16:06:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-29 14:06:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[its-a-miracle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="future"><![CDATA[future]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[workflow]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is best for mobile performance?</title>
		<link>http://mariehogebrandt.se/articles/what-is-best-for-mobile-performance/</link>
		<pubDate>Wed, 03 Jul 2013 10:00:25 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=957</guid>
		<description></description>
		<content:encoded><![CDATA[<p>After a lecture on <a href="http://wpsthlm.se/wordcamp-stockholm-2012/session-tank-pa-det-har-nar-du-bygger-for-mobilen/">WordCamp Stockholm (Swedish)</a> about how to develop for the mobile web (hint: latency is worse than a non-responsive page), followed by the discovery that Compass has functions to base64-encode both <a href="http://compass-style.org/reference/compass/helpers/inline-data/">images and fonts</a>, I decided to investigate how different parts interact when using different ways to optimize a page for speed.</p>

<p>Every page is tested in <a href="http://gtmetrix.com/">GTmetrix</a>, with the results presented <a href="#results">below</a>. Currently I have not made any effort to make it cross-browser, to not cloud the issue. A future post should probably concern how to make it as accessible as possible, as well as look into how much of the heaviness can be cut away. Do all of the font-files need to be encoded, or would it be acceptable to remove some? Feel free to <a href="https://github.com/Melindrea/mobile-base64-encoding-test">fork the repository</a> to experiment more.</p>

<h2>Benchmark</h2>

<p>The basic page is based on a minimal, responsive template from <a href="http://www.initializr.com/">Initializr</a>, without jQuery or Modernizr, as the test does not factor in JavaScript. I used six icons from <a href="http://paulrobertlloyd.com/2009/06/social_media_icons/">Paul Robert Lloyd</a>, and two full font families (including italics, bold and italic bold) (<a href="http://www.google.com/webfonts/specimen/Alegreya">Alegreya</a> och <a href="http://www.google.com/webfonts/specimen/Ubuntu">Ubuntu</a>). The fonts are accessible both on <a href="http://www.google.com/webfonts">Google Webfonts</a> and <a href="http://www.fontsquirrel.com/">FontSquirrel</a>. The experiments use either the Google Webfonts, or the standard web kit from FontSquirrel.</p>

<h2>Techniques</h2>

<h3>Minified CSS</h3>

<p>The benchmark page uses non-minified CSS, but starting with experiment two, the stylesheet is compressed through <a href="http://www.thesassway.com">Sass</a>.</p>

<h3>Images</h3>

<p>Images are served in three different ways:</p>

<ol>
<li>Benchmark is six unique images</li>
<li>Using a <a href="http://compass-style.org/help/tutorials/spriting/">Sprite through Compass</a> (marked with IS)</li>
<li>Unique images, but encoded in base64 to lessen HTTP requests (marked with II)</li>
</ol>

<h3>Fonts</h3>

<p>The fonts are served in four different ways:</p>

<ol>
<li>Every font by itself, in all necessary formats, using the web kit from FontSquirrel, locally</li>
<li>Google Webfonts, <code>@import</code>-ed into the stylesheet (marked with FG)</li>
<li>Google Webfonts, <code>&lt;link&gt;</code>-ed in the header (marked with FGL)</li>
<li>Base64 encoded into the CSS-file (marked with FI)</li>
</ol>

<h2>Results</h2>

<table id="results">
  <tr>
    <th>
    </th>
    
    <th>
      Page Speed Grade
    </th>
    
    <th>
      YSlow Grade
    </th>
    
    <th>
      Total page size
    </th>
    
    <th>
      Total # of requests
    </th>
    
    <th>
      Load (s) *
    </th>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index.html">Base</a>
    </th>
    
    <td>
      B (81%)
    </td>
    
    <td>
      B (87%)
    </td>
    
    <td>
      161KB
    </td>
    
    <td>
      16
    </td>
    
    <td>
      4.63
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-2.html">Minified (2)</a>
    </th>
    
    <td>
      B (81%)
    </td>
    
    <td>
      B (87%)
    </td>
    
    <td>
      159KB
    </td>
    
    <td>
      16
    </td>
    
    <td>
      4.62
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-3.html">IS (3)</a>
    </th>
    
    <td>
      A (97%)
    </td>
    
    <td>
      A (95%)
    </td>
    
    <td>
      159KB
    </td>
    
    <td>
      11
    </td>
    
    <td>
      3.37
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-4.html">FG (4)</a>
    </th>
    
    <td>
      C (73%)
    </td>
    
    <td>
      B (86%)
    </td>
    
    <td>
      344KB
    </td>
    
    <td>
      17
    </td>
    
    <td>
      5.59
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-5.html">FG, IS (5)</a>
    </th>
    
    <td>
      A (91%)
    </td>
    
    <td>
      A (94%)
    </td>
    
    <td>
      344KB
    </td>
    
    <td>
      12
    </td>
    
    <td>
      4.34
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-6.html">II (6)</a>
    </th>
    
    <td>
      A (98%)
    </td>
    
    <td>
      A (97%)
    </td>
    
    <td>
      159KB
    </td>
    
    <td>
      10
    </td>
    
    <td>
      3.12
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index.html-7">FG, II (7)</a>
    </th>
    
    <td>
      A (93%)
    </td>
    
    <td>
      A (95%)
    </td>
    
    <td>
      344KB
    </td>
    
    <td>
      11
    </td>
    
    <td>
      4.09
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-8.html">FI (8)</a>
    </th>
    
    <td>
      B (87%)
    </td>
    
    <td>
      B (87%)
    </td>
    
    <td>
      490KB
    </td>
    
    <td>
      8
    </td>
    
    <td>
      3.91
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-9.html">FI, II (9)</a>
    </th>
    
    <td>
      A (97%)
    </td>
    
    <td>
      A (97%)
    </td>
    
    <td>
      491KB
    </td>
    
    <td>
      2
    </td>
    
    <td>
      2.42
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-10.html">FI, IS (10)</a>
    </th>
    
    <td>
      A (92%)
    </td>
    
    <td>
      A (95%)
    </td>
    
    <td>
      490KB
    </td>
    
    <td>
      3
    </td>
    
    <td>
      2.66
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-11.html">FGL (11)</a>
    </th>
    
    <td>
      C (76%)
    </td>
    
    <td>
      B (86%)
    </td>
    
    <td>
      344KB
    </td>
    
    <td>
      17
    </td>
    
    <td>
      5.59
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-12.html">FGL, IS (12)</a>
    </th>
    
    <td>
      A (95%)
    </td>
    
    <td>
      A (94%)
    </td>
    
    <td>
      344KB
    </td>
    
    <td>
      12
    </td>
    
    <td>
      4.34
    </td>
  </tr>
  
  <tr>
    <th>
      <a href="/initializr/index-13.html">FGL, II (13)</a>
    </th>
    
    <td>
      A (97%)
    </td>
    
    <td>
      A (95%)
    </td>
    
    <td>
      344KB
    </td>
    
    <td>
      11
    </td>
    
    <td>
      4.09
    </td>
  </tr>
</table>

<p><small>* Calculated on a bandwidth of 0.25Mbit, and latency of 0.25s/call</small></p>

<p><small>Translation from my <a href="http://blog.melindrea.net/mobilutveckling-vad-ar-bast/">Swedish blog</a></small></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Comparing sprites, base64 encoding and other techniques to make a site more responsive.]]></excerpt:encoded>
		<wp:post_id>957</wp:post_id>
		<wp:post_date><![CDATA[2013-07-03 12:00:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-03 10:00:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-is-best-for-mobile-performance]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="base64-encode"><![CDATA[base64 encode]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="experiment"><![CDATA[Experiment]]></category>
		<category domain="post_tag" nicename="fonts"><![CDATA[fonts]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[mobile]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sunday last of June</title>
		<link>http://mariehogebrandt.se/articles/sunday-last-of-june/</link>
		<pubDate>Sun, 30 Jun 2013 09:41:27 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=963</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Doing my best to finish things for the trip. Still got a bit of packing and cleaning...</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>963</wp:post_id>
		<wp:post_date><![CDATA[2013-06-30 11:41:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-30 09:41:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sunday-last-of-june]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-status"><![CDATA[Status]]></category>
		<category domain="category" nicename="updates"><![CDATA[Updates]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Setting up development environment on Ubuntu 12.10</title>
		<link>http://mariehogebrandt.se/articles/setting-up-development-environment-on-ubuntu-12-10/</link>
		<pubDate>Mon, 01 Jul 2013 07:01:57 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=965</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Programming is an art form, and not just an engineering science. So, like creating any kind of artwork you need to have a solid base. In my view, that solid base comes from the tools you work with and in, and that helps you get the best product out.</p>

<p>This is the first in a series of articles on how I set mine up, ranging from specific programming languages, to overarching tools, to editor, where this one will act as an index to the others.</p>

<h2>Posts</h2>

<ul>
<li><a href="/articles/git-and-github-on-ubuntu">Git</a></li>
<li><a href="/articles/installing-sass-and-compass-on-ubuntu/">Sass &amp; Compass</a></li>
<li><a href="/articles/installing-yeoman-grunt-bower-and-yo-on-ubuntu/">Yeoman (including NodeJS)</a></li>
<li><a href="/articles/installing-phantomjs-and-casperjs-on-ubuntu/">PhantomJS &amp; CasperJS</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Index to posts on how to setup my development environment and workflow]]></excerpt:encoded>
		<wp:post_id>965</wp:post_id>
		<wp:post_date><![CDATA[2013-07-01 09:01:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-01 07:01:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[setting-up-development-environment-on-ubuntu-12-10]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article-index"><![CDATA[Article Index]]></category>
		<category domain="post_tag" nicename="development-environment"><![CDATA[development environment]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[workflow]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[966]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git and Github on Ubuntu</title>
		<link>http://mariehogebrandt.se/articles/git-and-github-on-ubuntu/</link>
		<pubDate>Tue, 02 Jul 2013 13:27:23 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=968</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The first day of work at Pineberry I set up my workstation (Ubuntu 11.10, upgraded to Ubuntu 12.04 in June). A lot of the things were basic -- PHP, MySQL, Apache... -- but a few things were completely new to me, including Git.</p>

<h2>So, what is Git?</h2>

<p>Git is a Version Control System, a distributed one to be exact. The best description I've seen to explain it comes from <a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/">GitMagic</a>, which compares coding to playing games, and version control to saving progress in different spots that you can return to later.</p>

<p>The distributed part means that there is no central or canon repository, but rather that each repository can be cloned independently, taking a peer-to-peer approach to it.</p>

<h2>Installation</h2>

<p>When I first installed it, I used the simplest version: <code>sudo add-get install git</code> which installed git, not too surprisingly. However, at a later point I needed to do something -- I can't recall what anymore -- and I found out that the version in Ubuntu is not the newest. For good reasons, obviously, you want to ensure that the stable version of any operating system is stable.</p>

<p>The version I use now, 1.7.10.4, was installed using the instructions for Ubuntu 10.04 by <a href="http://adammonsen.com/post/665">Adam Monsen</a>.</p>

<pre><code>sudo apt-get install python-software-properties
sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git
</code></pre>

<h2>Connection between Git and Github</h2>

<p>There is some confusion in what Git is and what <a href="http://www.github.com">Github</a> is. Github is a social coding website, mainly for collaborating on (or storing) Git repositories.</p>

<p>For a nice overview of a GitHub workflow see <a href="https://github.com/blog/1557-github-flow-in-the-browser">their blogpost</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Steps to setup Git on Ubuntu and how to set up your first Github repository (and why!)]]></excerpt:encoded>
		<wp:post_id>968</wp:post_id>
		<wp:post_date><![CDATA[2013-07-02 15:27:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-02 13:27:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[git-and-github-on-ubuntu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="category" nicename="installation"><![CDATA[Installation]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Showing Typographic work</title>
		<link>http://mariehogebrandt.se/articles/showing-typographic-work/</link>
		<pubDate>Sat, 06 Jul 2013 14:00:57 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=975</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As explained in the <a href="/colophon">colophon</a> several decisions have gone into the typography of this site. As some of it is fairly subtle, this article will show it off some more.</p>

<h2>Headers</h2>

<p>There are six full levels of headers available, though normally only three levels are used. First three are <em>cross-heads</em>, which means that they're centered. The first two levels are decorated with a symbol on either side, though the third level isn't.</p>

<p>The headers are all following the typographic scale suggested in [Typeplate], with the exception of the sixth level which is the same font-size as the paragraphs. They also all are smallcaps.</p>

<p>The fourth and fifth levels are <em>indented sideheads</em>, meaning they are left-aligned, with an indent equal to the paragraphs. To distinguish the fifth level further it is italic.</p>

<p>Finally the sixth level is a <em>run-in sidehead</em> which means that it is the same size as the paragraph, the same colour as the paragraph, but still keeping the smallcaps to make it clearly distinguishable from the paragraph.</p>

<h2>Paragraphs</h2>

<p>The first paragraph is decorated with a single symbol before it, and there is no indent outside of that. The one exception is a paragraph following a run-in sidehead header, as the effect of the run-in sidehead would be spoiled.</p>

<p>Paragraphs following a paragraph, like this one, has an indent matching the indented sideheads.</p>

<h2>Demo: Header 2</h2>

<p>This is a paragraph following a second-level header, much like most of the paragraphs in this explanation, but made more explicit.</p>

<h3>Demo: Header 3</h3>

<p>This is a paragraph following a third-level header. The third level headers are judiciously spread throughout the pages of the site, so it is also likely noticed.</p>

<h4>Demo: Header 4</h4>

<p>This is a paragraph following a fourth level header. Notice how the decoration and the header match each other quite nicely.</p>

<h5>Demo: Header 5</h5>

<p>This is a paragraph following a fifth level header. It is in much like the fourth level header, but smaller and uses an attractive italic.</p>

<h6>Demo: Header 6</h6>

<p>This is a paragraph following a sixth level header. This will very rarely be used, but it is declared to give more variety, if it s needed. Note how there is no decoration on this paragraph, and that the header appears to be part of it.</p>

<p>This is the second paragraph following a sixth level header, notice the different in text-indents compared to the others.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Explaining in more detail what decisions went into the typography.]]></excerpt:encoded>
		<wp:post_id>975</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 16:00:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 14:00:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[showing-typographic-work]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="design-decisions"><![CDATA[design decisions]]></category>
		<category domain="post_tag" nicename="typography"><![CDATA[typography]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installing Sass and Compass on Ubuntu</title>
		<link>http://mariehogebrandt.se/articles/installing-sass-and-compass-on-ubuntu/</link>
		<pubDate>Thu, 11 Jul 2013 15:47:35 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=991</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This article is about setting up Sass and Compass, but they in turn require Ruby, which means that the first part of this will deal with installing Ruby and <abbr title="Ruby Version Manager">RVM</abbr> on your installation. <a href="http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you/">This article by Ryan Biggs</a> explains in detail how-to (and to a certain extent why), so if you are interested I highly recommend you to read through it.</p>

<p>If not, the <abbr title="Too long, didn't read">TL;DR</abbr> version (terminal commands only) can be found below. First, however, one of the key things of Ryan Bigg's article:</p>

<blockquote>
  <p>Under no circumstance should you install Ruby, Rubygems or any Ruby-related packages from apt-get. This system is out-dated and leads to major headaches. Avoid it for Ruby-related packages. We do Ruby, we know what's best. Trust us.</p>
</blockquote>

<p>If you already have Ruby installed, feel free to jump directly to the <a href="#sass-compass">Sass &amp; Compass installation</a> below.</p>

<h2>TL; DR</h2>

<p>Based on Ryan Bigg's update from January 31st 2013. For Sass we <strong>do not</strong> need the Rails gem, so it will divert slightly from the article.</p>

<pre><code>sudo apt-get update

# Curl is a "library and command-line tool for transferring data"
sudo apt-get install curl

# Installs Ruby Version Manager
curl -L get.rvm.io | bash -s stable --auto

# Reloads the profile - assumes you're using BASH!
. ~/.bash_profile
</code></pre>

<p>At this point, test to ensure that it recognizes <abbr title="Ruby Version Manager">RVM</abbr> (for instance through running <code>rvm requirements</code>). If not, you may want to run <code>. ~/.bashsrc</code>. The difference is in the scope of another article, though <code>man bash</code> is a good start, so's <a href="https://www.google.com/#output=search&amp;q=bash_profile%20vs%20bashrc">googling it</a>.</p>

<h3>Requirements</h3>

<h4>DEPRECATED</h4>

<p>The assumption for this article is that you are mainly installing Ruby for the benefits to using various gems such as Sass and Compass, so when running <code>rvm requirements</code> you will be looking for the heading that includes <code>For Ruby / Ruby HEAD</code> and install all the packages suggested there, using <code>sudo apt-get install</code>. At the time of writing they are the following:</p>

<pre><code>sudo apt-get install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion pkg-config
</code></pre>

<h4>Correct</h4>

<p><code>rvm requirements</code> now installs any missing requirements.</p>

<h3>Installing Ruby (finally!)</h3>

<p>If you're intending to use Ruby outside of development with Sass, you are highly recommended to read the article this section is a summary of, as it mentions a few gotchas. For the purpose of Sass, those gotchas are irrelevant.</p>

<pre><code>rvm install 2.0.0
rvm use 2.0.0
</code></pre>

<p>If you want to be more exact, you can take note of the patchlevel in this way:</p>

<p>Run <code>ruby -v</code>. The output will be something along the lines of <code>ruby 2.0.0-p247 (2013-06-27 revision 41674) [x86_64-linux]</code>, where the <code>p247</code> denotes the patchlevel.</p>

<pre><code>rvm --default use 2.0.0-p247
</code></pre>

<p>Beyond this point the above article by Ryan Biggs deals with Rails, so the <abbr title="Too long, didn't read">TL;DR</abbr> section is done for now.</p>

<h2 id="sass-compass">Sass &amp; Compass installation</h2>

<p>This is the easiest part of the HOW-TO, and can also be found on <a href="http://compass-style.org/install/">Compass installation</a></p>

<pre><code>gem update --system #gets the latest version of the RubyGems installer
gem install compass #installs any gem requirements (such as Sass) and then Compass
</code></pre>

<p>You're done! At least with this bit. The series will continue with other parts of my development tools.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Sass is a pre-preprocessor for CSS which I feel makes life easier. Compass is a CSS Authoring Framework that adds commonly used mixins.]]></excerpt:encoded>
		<wp:post_id>991</wp:post_id>
		<wp:post_date><![CDATA[2013-07-11 17:47:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-11 15:47:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[installing-sass-and-compass-on-ubuntu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="compass"><![CDATA[compass]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="installation"><![CDATA[Installation]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="rvm"><![CDATA[rvm]]></category>
		<category domain="post_tag" nicename="sass"><![CDATA[sass]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installing Yeoman (Grunt, Bower and Yo) on Ubuntu</title>
		<link>http://mariehogebrandt.se/articles/installing-yeoman-grunt-bower-and-yo-on-ubuntu/</link>
		<pubDate>Sun, 14 Jul 2013 10:00:56 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=997</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In this particular article, we'll go through how to set up <a href="http://gruntjs.com/">Grunt</a>, <a href="http://bower.io/">Bower</a> and <a href="http://yeoman.io/">Yo</a>. The installation itself is very easy. You need to run the command <code>npm install -g yo</code>, which uses <a href="http://nodejs.org/">NodeJS</a> to install Yo globally. Yo has Bower and Grunt as dependencies, so at that point it's all done.</p>

<p>The trick is, of course, the dependencies. You need to have installed <a href="/articles/git-and-github-on-ubuntu">Git</a>, and (assuming you're interested in my workflow) <a href="/articles/installing-sass-and-compass-on-ubuntu">Sass with Compass</a>. The third important thing you need to install is NodeJS.</p>

<h2>Preparations</h2>

<p>If you did not install Sass, you probably want to update and install the pre-requisites:</p>

<pre><code>sudo apt-get update
sudo apt-get upgrade
sudo apt-get install build-essential openssl libssl-dev curl
</code></pre>

<h2>Install <abbr title="Node Version Manager">NVM</abbr></h2>

<p>Just as with Ruby, it's occasionally a very good idea to ensure that one can use different versions. I use <a href="https://github.com/creationix/nvm">Node Version Manager</a> by <a href="https://github.com/creationix">Tim Caswell</a> and see no reason to change.</p>

<p>Taking a leaf from Ruby and <abbr title="Ruby Version Manager">RVM</abbr>, the project will be cloned into a hidden folder named <code>.nvm</code> under your home folder:</p>

<pre><code>git clone git://github.com/creationix/nvm.git ~/.nvm
</code></pre>

<p>You will need to make sure that <abbr title="Node Version Manager">NVM</abbr> is loaded when you open a terminal, through the following line:</p>

<pre><code>echo '[[ -s "$HOME/.nvm/nvm.sh" ]] &amp;&amp; source "$HOME/.nvm/nvm.sh"' &gt;&gt; ~/.bash_profile
</code></pre>

<p>To be able to use <abbr title="Node Version Manager">NVM</abbr> directly, run <code>. ~/.nvm/nvm.sh</code>, which will load it into the current shell session.</p>

<h2>Install NodeJS</h2>

<p>First, find which version of NodeJS is the current one, most easily accomplished by surfing to <a href="http://nodejs.org/">NodeJS homepage</a>. At the time of the writing, it is v0.10.20.</p>

<p>It might take a bit to install NodeJS, so be patient...</p>

<pre><code>nvm install v0.10.20 #or whatever is the latest stable at your reading
nvm alias default 0.10.20 #sets the default assumption of any project to that
</code></pre>

<h2>Installing <abbr title="Node Package Manager">NPM</abbr></h2>

<p><abbr title="Node Package Manager">NPM</abbr> is the package manager for NodeJS (what a shocker, eh?), with the homepage (and index of packages) at <a href="https://npmjs.org/">NPMJS</a>. It occasionally feels somewhat meta that we will install a package manager (<abbr title="Node Package Manager">NPM</abbr>) so that we can install another package manager (Bower), but that is an article for another day.</p>

<p>Oh, look, another cURL script being fetched and then piped through sh!</p>

<pre><code>curl https://npmjs.org/install.sh | sh
</code></pre>

<h2>How to use <abbr title="Node Package Manager">NPM</abbr></h2>

<p>As noted above, the command to install Yo and it's dependencies Grunt and Bower is <code>npm install -g yo</code>. More often than not, you will want to keep the Node packages local to whichever project you're in, but if you use the <code>-g</code> switch, it will install that particular package globally, IE accessible to all projects.</p>

<p>Another useful command is <code>npm list</code> which lists all the packages installed in that project or, with the <code>-g</code> switch, globally.</p>

<p>Congratulations, you are now all done and have Grunt, Bower and Yo properly installed!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Yeoman is a catch-all phrase (at this time) for Grunt (automation), Bower (package manager) and Yo (scaffolder).]]></excerpt:encoded>
		<wp:post_id>997</wp:post_id>
		<wp:post_date><![CDATA[2013-07-14 12:00:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-14 10:00:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[installing-yeoman-grunt-bower-and-yo-on-ubuntu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bower"><![CDATA[bower]]></category>
		<category domain="post_tag" nicename="grunt"><![CDATA[grunt]]></category>
		<category domain="category" nicename="installation"><![CDATA[Installation]]></category>
		<category domain="post_tag" nicename="nodejs"><![CDATA[nodejs]]></category>
		<category domain="post_tag" nicename="npm"><![CDATA[npm]]></category>
		<category domain="post_tag" nicename="nvm"><![CDATA[nvm]]></category>
		<category domain="post_tag" nicename="yeoman"><![CDATA[yeoman]]></category>
		<category domain="post_tag" nicename="yo"><![CDATA[yo]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installing PhantomJS and CasperJS on Ubuntu</title>
		<link>http://mariehogebrandt.se/articles/installing-phantomjs-and-casperjs-on-ubuntu/</link>
		<pubDate>Thu, 18 Jul 2013 22:37:21 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1005</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://phantomjs.org">PhantomJS</a> is used quite a lot in headless browser testing and similar tasks. I've looked over various projects which deal with screenshots, and it's been on my TODO-list to add responsive screenshotting into my build process. I was kicked into gear reading <a href="http://net.tutsplus.com/tutorials/javascript-ajax/responsive-screenshots-with-casper/">the following tutorial</a> which gives a barebones script. It also used <a href="http://casperjs.org/">CasperJS</a>, which is why the script that I made (based on their script) uses it.</p>

<p>Another reason is because I looked closer at CasperJS and noticed that it (at least in theory) would also work with another headless browser using Gecko, <a href="http://www.slimerjs.org/">SlimerJS</a>, which means that a future iteration will theoretically be able to support both WebKit and Gecko screenshots. I have not yet tested this theory, which is why SlimerJS is not touched on in this article.</p>

<h2>Prerequisites</h2>

<ul>
<li>Python 2.6 or higher, which is pre-installed on Ubuntu</li>
<li><a href="/articles/git-and-github-on-ubuntu/">Git</a></li>
</ul>

<h2>Install PhantomJS</h2>

<p>Instructions can be found <a href="http://phantomjs.org/download.html">on their page</a> or if you feel confident around the terminal, follow the commands below (note, it's using the version that's the most current of the writing, 1.9.1, so if you want to ensure you have the newest, check the webpage and just replace 1.9.1 with whatever is the current newest). The one thing you should <strong>not</strong> do is <code>sudo apt-get install phantomjs</code>, as the version in the repositories is 1.4, and as we've established, the latest version now is 1.9.</p>

<pre><code>cd ~/Downloads #default folder for downloads, duh
</code></pre>

<p>Decide if you need the 64-bit or 32-bit download, where the difference in file name is that 64-bit has the suffix <code>-x86_64.tar.bz2</code> and 32-bit has the suffix <code>-i686.tar.bz2</code>.</p>

<pre><code>#64-bit, v. 1.9.1
wget http://phantomjs.googlecode.com/files/phantomjs-1.9.1-linux-x86_64.tar.bz2

#32-bit, v. 1.9.1
wget http://phantomjs.googlecode.com/files/phantomjs-1.9.1-linux-i686.tar.bz2

#Unpack the tarball!
#64-bit, v. 1.9.1
tar -xvf phantomjs-1.9.1-linux-x86_64.tar.bz2

#32-bit, v. 1.9.1
tar -xvf phantomjs-1.9.1-linux-i686.tar.bz2
</code></pre>

<p>This is where there are two different paths to take. The binary <code>bin/phantomjs</code> is ready to use, so you can</p>

<ol>
<li>Just move it and delete the rest of the files once you clear your Download folder the next time or</li>
<li>Move the entire folder somewhere (say the Repositories folder) and symlink the relevant binary</li>
</ol>

<p>In case you haven't caught this nice little tip before: Write the first few letters of the path- or filename and press <code>tab</code> for autocomplete, if you're not just copy/pasting.</p>

<h3>Sidenote, ~/bin vs /usr/local/bin</h3>

<p>I like to use the home-folder to store things like binaries, because it makes it a lot easier for me to backup everything I need the next time I need to reinstall, which is why I'm writing this with the assumption that you will put the binaries in <code>~/bin</code>. I will then store most source packages under <code>/home/user/repositories</code>. Another reason is that I prefer to not need to use <code>sudo</code> on normal commands.</p>

<p>If you prefer another way, or need to share packages between several users on one computer, you may want to replace <code>~/bin</code> with <code>/usr/local/bin</code>, and <code>~/repositories</code> with <code>/usr/local/src</code>, but then you need to ensure that you are prepending the commands with <code>sudo</code>, as the <code>/usr/local/</code> folder is owned by root.</p>

<h3>Path 1</h3>

<pre><code>#If you don't have bin under your home folder, create it
mkdir ~/bin

#64-bit
mv phantomjs-1.9.1-linux-x86_64/bin/phantomjs ~/bin/phantomjs

#32-bit
mv phantomjs-1.9.1-linux-i686/bin/phantomjs ~/bin/phantomjs
</code></pre>

<h3>Path 2</h3>

<p>This will just be shown using the 64-bit, but as always prior: replace <code>x86_64</code> with <code>i686</code> to instead use the 32-bit one.</p>

<pre><code>#If it does not exist, create ~/repositories
mkdir ~/repositories

#Move it and rename
mv phantomjs-1.9.1-linux-x86_64 ~/repositories/phantomjs
</code></pre>

<p>Create a symbolic link to your local bin folder (creating it under your home first, see path 1) ln -sf ~/repositories/phantomjs/bin/phantomjs ~/bin/phantomjs</p>

<h3>Test it!</h3>

<pre><code>phantomjs --version
</code></pre>

<p>If you get an error that it's not installed, close the terminal and open a new one. You might be able to just run the command <code>. ~/.bashrc</code> which reloads the file that appends your <code>/home/user/bin</code> folder to your <code>PATH</code>. If you're still out of luck, google whatever error message you're getting. It's always a good practice when you're running into issues.</p>

<h2>Installing CasperJS</h2>

<p>Unlike PhantomJS, you have to take the "second path" of cloning the repository and then symlinking it. The instructions are more or less taken from the <a href="http://docs.casperjs.org/en/latest/installation.html">installation information</a>, with some changes in where to store things.</p>

<pre><code>#If it does not exist, create ~/repositories
mkdir ~/repositories
cd ~/repositories

#clone the repository from the master branch
git clone git://github.com/n1k0/casperjs.git

#Symlink the relevant file into your bin
ln -sf ~/repositories/casperjs/bin/casperjs ~/bin/casperjs
</code></pre>

<p>Now test it. Assuming everything worked, you'll get a nice helpmessage, as well as which PhantomJS version you're using. casperjs</p>

<p>In case it tells you that it can't find the file, try running the command <code>python ~/bin/casperjs</code>. That's what happened when I ran it on my working machine. On the test machine (a virtual 12.04LTS Ubuntu) these commands worked without a hitch.</p>

<p>What I found out was the issue is that somewhere in there, the line endings had ended up screwed up, using DOS line endings where it should be using Unix. What worked for me (and is thus a good start for you) is that beautiful command <code>dos2unix</code>.</p>

<pre><code>sudo apt-get install dos2unix #installs it if it isn't already installed
dos2unix ~/repositories/casperjs/bin/casperjs #Can't be ran on a linked resource
casperjs #Check to make sure you get said helpmessage
</code></pre>

<h2>Finishing comments</h2>

<p>By now you should have both PhantomJS and CasperJS, which will be relevant in future articles, in particular on my workflow.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[PhantomJS is a "headless WebKit scriptable with a JavaScript API", with CasperJS building on it to give high-level functions.]]></excerpt:encoded>
		<wp:post_id>1005</wp:post_id>
		<wp:post_date><![CDATA[2013-07-19 00:37:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-18 22:37:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[installing-phantomjs-and-casperjs-on-ubuntu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="casperjs"><![CDATA[casperjs]]></category>
		<category domain="category" nicename="installation"><![CDATA[Installation]]></category>
		<category domain="post_tag" nicename="phantomjs"><![CDATA[phantomjs]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[installing-phantomjs-and-casperjs]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>July 18th 2013</title>
		<link>http://mariehogebrandt.se/articles/july-18th-2013/</link>
		<pubDate>Fri, 19 Jul 2013 02:52:50 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1012</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Mental note: Neither North Carolina nor Colorado is pleasant during the height of summer. Keep this in mind. Perfect weather for wine, though!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1012</wp:post_id>
		<wp:post_date><![CDATA[2013-07-19 04:52:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-19 02:52:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[july-18th-2013]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<category domain="post_format" nicename="post-format-status"><![CDATA[Status]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>July 25th 2013</title>
		<link>http://mariehogebrandt.se/articles/july-25th-2013/</link>
		<pubDate>Thu, 25 Jul 2013 12:59:06 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1014</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Finally back home! Tired, though... Still recovering from the flight.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1014</wp:post_id>
		<wp:post_date><![CDATA[2013-07-25 14:59:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-25 12:59:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[july-25th-2013]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<category domain="post_format" nicename="post-format-status"><![CDATA[Status]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Open Source Report Card</title>
		<link>http://mariehogebrandt.se/articles/open-source-report-card/</link>
		<pubDate>Thu, 25 Jul 2013 13:00:08 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1017</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://osrc.dfm.io/Melindrea">http://osrc.dfm.io/Melindrea</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[An interesting idea of parsing Github data to see activity for any given user.]]></excerpt:encoded>
		<wp:post_id>1017</wp:post_id>
		<wp:post_date><![CDATA[2013-07-25 15:00:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-25 13:00:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[open-source-report-card]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<category domain="post_format" nicename="post-format-link"><![CDATA[Link]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>July 28th 2013</title>
		<link>http://mariehogebrandt.se/articles/july-28th-2013/</link>
		<pubDate>Sun, 28 Jul 2013 11:18:53 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1023</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Struggling with RegExp so I can finish up the task I'm working on for Grunt. After that, starting with articles on my theme development.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1023</wp:post_id>
		<wp:post_date><![CDATA[2013-07-28 13:18:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-28 11:18:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[july-28th-2013]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<category domain="post_format" nicename="post-format-status"><![CDATA[Status]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating my theme</title>
		<link>http://mariehogebrandt.se/articles/creating-my-theme/</link>
		<pubDate>Mon, 05 Aug 2013 19:46:30 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1027</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So, back in December of 2012 I bought the domain name mariehogebrandt.se, with the intent of replacing webpage I'd had prior to that, which was hosted through my brother-in-law and my sister. I'd already started something like blogging on another of my domain names, <a href="http://blog.melindrea.net">Melindrea.net</a>, but it was only in Swedish, and I knew I had to do something about it. As you might know, the plan for this site is to have it both in English and Swedish, but let's not get ahead of ourselves. I want to start this series with explaining what went on before I touched a single line of code.</p>

<h2>Design and content</h2>

<p>I agree fully that "content is king", so I knew that before I could come up with a design, I would need to decide what kind of content I was wanting. I came up with the following list on what I wanted my site for:</p>

<ol>
<li>Presentation of myself. Why have a page with my name on it without selling my own brand, so to speak?</li>
<li>Articles and tutorials on various things in technology. I enjoy writing, and I really enjoy programming, so I knew I wanted to use my site as a tool to publish articles that I hope others will enjoy and get use out of as well, especially with the focus in Web currently on using Apple products. I don't at all mind Apple, but I enjoy my Ubuntu.</li>
<li>Various displays of my creativity, such as links to projects on Github and other places, a gallery of Deviant Art images (WIP), role playing characters and maybe the odd poem or story.</li>
</ol>

<p>What this confirmed to me is that a majority of my content is text, which means that the typography is important, which has <a href="http://mariehogebrandt.se/articles/showing-typographic-work/">already been covered</a>. I also knew that I want to stray from some of the more <a href="http://exalted.melindrea.net/">flamboyant</a> <a href="http://www.exaltedage.net/">designs</a> I've made, while still showing who I am.</p>

<h3>History</h3>

<p>Let's back up for a moment. I've been doing webpages for over half my life. When I did my first few, we used frames. I moved from there to tables, and finally over into CSS. I idolised <a href="http://csszengarden.com/">CSS Zengarden</a> (though seriously, who didn't?!?), and wished I had the graphical design background to pull that off.</p>

<p>In time for graduation I finished a design that looked like pictures of the ocean hanging on a wall, but it wasn't responsive. A shame, really, because it was pretty. Going from there I mused a while the idea of using a bunch of tabs on the side of a folder as a design idea, but it became too messy, too complicated. In the end I decided on the subtle effects in the current theme.</p>

<h3>Typography</h3>

<p>The first version of the typography was before I read <cite>The Ele­ments of Typo­graphic Style</cite>, with Georgia as bodytext, paired with <a href="http://www.google.com/webfonts/specimen/Playfair+Display">Playfair Display</a> by Claus Eggers Sørense. Georgia has grown on me lately, I like its round forms and beautiful numerals, and Playfair Display - especially in its boldest form - complimented it quite nicely. However, when I saw <a href="http://www.calendasplus.com">Calendas Plus</a> by <a href="http://www.atipo.es/">Atipo</a>, I preferred it to Georgia for bodytext, and it was too different from Playfair Display to play fair with it, so to speak.</p>

<p>At the time of me finalising the typography I had also read <cite>The Ele­ments of Typo­graphic Style</cite> and decided I liked some of the different headings and suggestings it put forth. To me, the current type is somewhat whimsical and not quite modern, while also not (hopefully) being too dated.</p>

<p>Of course, Calendas Plus is not very suited for code. That is why I for all the code sections use <a href="https://github.com/adobe/source-code-pro">Source Code Pro</a> by Adobe, which happens to be the same font I myself code in.</p>

<h3>Grid considerations</h3>

<p>Using a grid when designing does make a lot of sense, but I want it to be easily made responsible. I've read about other grids (and tried some but not all), but I decided on using the <a href="http://goldengridsystem.com/">Golden Grid System</a>. It's not the first time I've used it, and it's simplicity fits my needs. It can require a bit of extra effort in getting backgrounds of the boxes to work together, and it's not a grid system with pre-defined classes, so if one wants something closer to that one need to define them oneself.</p>

<p>I use the class <code>l-container</code> as the class on every element that should be, well, a container, and a couple of different classes to set how it behaves at various breakpoints. The system uses padding and border-box to get the percentage correct, but that leads to the issue that if one, as I did, want to have a background on elements, with a visible gutter. To solve that, I have an inner element (with the class <code>inner</code>) which has the actual background.</p>

<p>Currently, I have three different layouts. <code>content-first</code> is the layout with a sidebar to the right of the actual content, <code>content-text</code> is a single column with a lot of padding, to be used for pure text content, and <code>content-media</code> is to be used for galleries. There is not as much padding, since images should fill out the area more.</p>

<h3>Colour scheme</h3>

<p>I love greenish-blue shades, and I settled for the shade <code>#00AE68</code>. The theme uses different shades of the tetrad originating from it, as seen <a href="http://colorschemedesigner.com/#3441Tw0wbw0w0">at Color Scheme Designer</a>. The shades for body copy and headers are darkened versions of <code>#007144</code>, while not being purely black, to keep the scheme solid. I wanted to keep the site fairly light, but with at least something going on, which is why I went with a <a href="http://subtlepatterns.com/">Subtle Pattern</a> called Exclusive Paper.</p>

<h2>Putting it together</h2>

<p>The next few articles will cover more in detail how I went about, with Grunt tasks and the various scripts that went into it, as well as how I separated the workflow into "frontend" and "backend".</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Workflow, tools and inspiration used to build MarieHogebrandt.se]]></excerpt:encoded>
		<wp:post_id>1027</wp:post_id>
		<wp:post_date><![CDATA[2013-08-05 21:46:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-05 19:46:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[creating-my-theme]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article-index"><![CDATA[Article Index]]></category>
		<category domain="post_tag" nicename="design-decisions"><![CDATA[design decisions]]></category>
		<category domain="post_tag" nicename="typography"><![CDATA[typography]]></category>
		<category domain="post_tag" nicename="waffling"><![CDATA[waffling]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[workflow]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>August 8th 2013</title>
		<link>http://mariehogebrandt.se/articles/august-8th-2013/</link>
		<pubDate>Wed, 07 Aug 2013 18:22:57 +0000</pubDate>
		<dc:creator><![CDATA[webmaster]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1032</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Mental note: Chrome has a bug when it comes to small-caps and text-rendering: optimizeLegibility.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1032</wp:post_id>
		<wp:post_date><![CDATA[2013-08-07 20:22:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 18:22:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[august-8th-2013]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<category domain="post_format" nicename="post-format-status"><![CDATA[Status]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>10 Useful WordPress Plugins</title>
		<link>http://mariehogebrandt.se/articles/10-useful-wordpress-plugins/</link>
		<pubDate>Fri, 09 Aug 2013 15:14:34 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1035</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Plugins are to me both the best and the worst of WordPress. Some plugins are indispensable becauce they add functionality that either is missing "as of yet" or is unlikely to be put into core for one reason or another. It's also a fact that if you have several different plugins you risk slowing the site down through HTTP-requests, and if you're unlucky there will be backdoors or just slow code. As I said, the best and worst.</p>

<p>Here's my own list of which plugins I at this point would not like to be without, and why.</p>

<h2>Advanced Custom Fields</h2>

<p>Custom fields is a great idea, but needing to remember what you named the "mood" field or whatever you're using is a touch annoying. Enter <a href="http://www.advancedcustomfields.com/">Advanced Custom Fields</a>, which allows you to create fields with different datatypes, that show up on different types of posts, depending on how you set it. If you're working with selling themes, their <a href="http://www.advancedcustomfields.com/add-ons/options-page/">Options Page</a> (which unfortunately is a premium add-on) is really, really useful.</p>

<h2>Better WP Security</h2>

<p>Though you should never think that just because you have a plugin installed, your site is secured, I do feel that <a href="http://wordpress.org/plugins/better-wp-security/">Better WP Security</a> is a good start. Install it in a test environment first, and explore the various options to make sure you understand why (if not how) it protects, since then you will be better yourself at hardening the installation. It's also a good idea to read up on security overall, obviously.</p>

<h2>Contact Form 7</h2>

<p>Obviously you want people to keep in touch with you (right?), and though I know that <a href="http://www.gravityforms.com/">Gravity Forms</a> are probably the best if you need more advanced forms, it's also quite expensive. For more standard use, <a href="http://contactform7.com/">Contact Form 7</a> fits the bill perfectly. There's even an <a href="http://www.advancedcustomfields.com/add-ons/contact-form-7-field/">add-on for ACF</a> to attach to it. I'd also like to recommend using the <a href="http://wordpress.org/plugins/contact-form-7-honeypot/">Honeypot</a> plugin rather than any ugly captchas.</p>

<p>Two large tweaks have been made: The style sheet is baked into the site stylesheet, and the contact-form-7 script is deregistered <strong>unless</strong> it's on the contact page.</p>

<pre><code>wp_deregister_style( 'contact-form-7' ); //These styles are baked into the stylesheet

if ( !is_page('contact')) {
    wp_deregister_script( 'contact-form-7' );
}
</code></pre>

<p>As I only use it on that page, there is little reason to concat the contact-form-7 scripts into my built script, but if I would use it more, I probably would.</p>

<h2>Log Deprecated Notices</h2>

<p>Mostly useful when developing, <a href="http://wordpress.org/plugins/log-deprecated-notices/">Log Deprecated Notices</a> by Andrew Nacin does pretty much what it says on the label. It also logs if any functions are used incorrectly, allowing for you to fix things quicker.</p>

<h2>W3 Total Cache</h2>

<p>Not exactly a surprising plugin (it's touted on the plugin page as being trusted by countless companies, including mattcutts.com), it <a href="http://www.dashboardjunkie.com/test-of-wp-caching-plugins-w3-total-cache-vs-wp-super-cache-vs-quick-cache">does the job</a> very nicely. Why use a caching plugin? For performance. By using a caching plugin such as <a href="http://wordpress.org/extend/plugins/w3-total-cache/">W3 Total Cache</a> you can serve pages and posts as static files rather than dynamic, and with the right setup you can also minify and concatenate scripts and CSS that isn't already concatenated/minified.</p>

<h2>Widget Logic</h2>

<p>If the theme is handcrafted to fit a particular content, you might not need <a href="http://wordpress.org/plugins/widget-logic/">Widget Logic</a>, since at that point you can set different widget areas in the code itself. However, if you for whatever reason can't/don't want to code the logic into the theme itself, Widget Logic is the next best thing. You do need to understand PHP logic and code, but that's part of the fun!</p>

<h2>Wordpress SEO</h2>

<p>Unless you're a big fan of coding in page titles, I strongly recommend <a href="http://yoast.com/wordpress/seo/">Wordpress SEO</a>. Oh, I know that it's for SEO, and if that's what you're needing there's plenty of people singing its' praise elsewhere. Personally I use it to clean up the head some, deal with breadcrumbs and set titles.</p>

<h2>WP-Markdown</h2>

<p>One of my "must have" plugins. I am allergic to WYSIWYG, and writing in pure HTML is... tedious. <a href="http://wordpress.org/plugins/wp-markdown/">WP-Markdown</a> is based on the <a href="http://michelf.ca/projects/php-markdown/extra/">PHP port Markdown Extra</a>, and includes such lovely features such as code highlighting using <a href="https://code.google.com/p/google-code-prettify/">Google Code Prettify</a>, and previewing as you write. The one downside is that you'll need to use the <code>[embed]</code> shortcode to embed YouTube videos and such.</p>

<p>WP-Markdown is probably the one plugin I have tweaked the most, mainly since it uses a lot of styles and scripts, in a combination of the Prettify and the Editor.</p>

<h3>Prettify</h3>

<p>The default theme for Prettify is light, and I wanted to use closer to the setup I have on my personal computer, so dark background and white font, with some pretty, reasonably bright colours for touching up. These styles were, obviously, baked into my stylesheet, as seen in the <a href="https://github.com/Melindrea/mariehogebrandt-se/blob/master/app/styles/components/_code.scss">_code.scss file</a>.</p>

<p>The <code>prettify.js</code> file loads in the head, so it is concatenated together with Modernizr and Selectivzr into the file <code>head.min.js</code> in the build step.</p>

<h3>Markdown</h3>

<p>The styles for Markdown haven't been changed much from the original code in the plugin, but were copied over to it's own <a href="https://github.com/Melindrea/mariehogebrandt-se/blob/master/app/styles/components/_markdown.scss">file under components</a>, so that changes could be done.</p>

<p>There where quite a few scripts that I feel should be loaded in the footer, so they ended up being concatenated into <code>main.min.js</code> which is loaded in the footer. One of the biggest advantages to handcrafting a theme with specific plugins in mind.</p>

<h3>Code</h3>

<p>And here's the actual code to clean up markdown, to be dropped into your <code>functions.php</code> file, or something similar. I am planning on breaking out that and the above code for Contact Form 7 into a file called <code>plugins.php</code>, so that I can deal with plugins as I add or remove them.</p>

<pre><code>function mh_remove_markdown()
{
    if ( !is_admin()) {
        wp_deregister_style('wp-markdown-prettify');
        wp_deregister_style('wp-markdown-editor');

        wp_deregister_script('md_convert');
        wp_deregister_script('md_sanit');
        wp_deregister_script('md_edit');
        wp_deregister_script('wp-markdown-prettify');
        wp_deregister_script('wp-markdown-editor');
    }
}
add_action('wp_enqueue_scripts', 'mh_remove_markdown', 15);
</code></pre>

<h2>WP-PageNavi</h2>

<p>Not much really needed to say about <a href="http://wordpress.org/plugins/wp-pagenavi/">this one</a>. It provides fancier pagination, and the CSS is default, but baked into the site CSS.</p>

<h2>wp-Typography</h2>

<p>Through various means and ways, I eventually landed on <a href="http://wordpress.org/support/plugin/wp-typography">wp-Typography</a> as a plugin that I'd like to use. However, as can be clearly seen, it hasn't been updated for two years. I have updated it some (mainly to remove deprecated calls), and the version I use <a href="https://github.com/Melindrea/wp-typography">can be found on Github</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Descriptions and whys-hows of plugins I personally use]]></excerpt:encoded>
		<wp:post_id>1035</wp:post_id>
		<wp:post_date><![CDATA[2013-08-09 17:14:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-09 15:14:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[10-useful-wordpress-plugins]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="design-decisions"><![CDATA[design decisions]]></category>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[WordPress]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Terminology in Web Development</title>
		<link>http://mariehogebrandt.se/articles/terminology/</link>
		<pubDate>Wed, 14 Aug 2013 10:44:25 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1044</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Words can be difficult, since their definition occasionally differs depending on the biases of the person who uses them. To at least try to minimise that, this is a catch-all page for terminology and how I use it. It shouldn't differ too much from the dictionaries (and Wikipedia), but with more examples so we are on the same page.</p>

<h2 id="architecture">3-tier Architecture</h2>

<p>For the more formal and broader (IE not just web development) definition, <a href="http://en.wikipedia.org/wiki/Multitier_architecture">Wikipedia has an article on 3-tier Architecture</a>, which is the basis for my definitions.</p>

<h3>Front-end/User Interface/Presentation layer</h3>

<p>What the browser renders. HTML, JavaScript, graphics, CSS. It can be quite simple, or advanced through use of more complex JavaScript applications, or for that matter CSS animations and such. The to me important matter is that it should be separated from data and, in particular, from whatever server-side languages are used. It should not be important to the UI whether this is a WordPress site written in PHP, or a Python site with (or without...) Django, or a Ruby on Rails application, or for that matter a fat client which gets the data using a REST adapter from "somewhere else" (I'm looking at you, Ember!).</p>

<p>It can (and probably often is) debated on whether templating languages such as Smarty or Blade belongs to the front-end, but I overall consider them separate from it, but using the standards developed by the front-end.</p>

<p>Another consideration is whether the admin areas would be part of the front-end, to which I say "absolutely!", at least from a developer perspective. There is very little difference between building a UI (to use that part of the front-end) intended to show the latest cat images to any one who wants to see them and building a UI that is intended to allow an author to upload their latest masterpiece, outside of complexity. It's expectations that the deeper layers of the stack should fulfill: If I do X then Y, if I do Z then A. This happens if I mouse over that, if I upload a valid file then it should be uploaded.</p>

<p>Forms and such should be validated in the front-end, but they should also be validated deeper in the stack, obviously.</p>

<h3>Middleware</h3>

<p>This often gets referred to as "backend", my main reason to divide the terms has to do with testibility. This is where your server-side language of choice fits in, and it should serve the information in a way that the presentation layer can handle. That might be translating tables to a JSON object that is consumed by an Ember model, and/or generating the agreed-upon scripts/CSS/HTML that the presentation layer has developed. Generally, if one uses/develops for WordPress, this is about as deep in the stack as one gets.</p>

<p>As a note, if you've ever played on role playing chats, most of what is referred to as "the database" is in this layer, the misnomer having to do with confusing the stored characters/data and the presentation of said characters/data. This layer communicates with the actual data storage, but it should not be dependent upon one particular type of it. In reality it's impractical to build something that could be easily changed from using, say, MySQL to NoSQL, but with a bit of carefulness it's at least possible to build something that doesn't need too much effort to move from a SQLite database (for development/testing) to a MySQL database (for production).</p>

<h3>Back-end/Persistence layer/Database</h3>

<p>This should be the most secured part of the website. In an ideal world, you should not be able to access it (outside of dedicated areas on your webhost) through any other means than middleware, and there should be strict rules on how to interact with it.</p>

<p>How much effort goes into the database depends quite a bit on the kind of application, obviously. As I noted higher up, most people who develop in WordPress never really look into the database, and both Django, Laravel and Ruby on Rails (among others...) have ways to create tables and such without the developer needing to get their hands dirty with the functionalities of the data storage.</p>

<p>However, the more important the data and its' structure is, the more important it is to take good care with the persistance layer. The larger the application, the higher the number of users and number of transactions, the more effort needs to be put into making it right to begin with, and very few Object-Relation Managers can deal with complex and large sets of data as efficiently as someone who knows exactly what needs to be done, and how to do it. Figuring out keys and indices and how much of a cell needs to be covered for the full-text search to perform well without being useless are all tasks better suited for people than for software.</p>

<p>Personally, I would also add cron jobs and similar things to the description of back-end. They might use the same libraries/framework as the middleware, but any tasks intended to do things heavily on the server are back-end tasks.</p>

<h2 id="flat-build">Flat Build</h2>

<p>This is a term I picked up quite recently, when I was browsing around and found <a href="http://blog.mattbailey.co/post/52949597525/front-end-process-flat-builds-and-automation">Matt Bailey's</a> articles on it, and it immediately resonated with me, so once I finally finish it there will be an article on how I implement it, but until then this definition will have to do. Oh, and also <a href="http://dbushell.com/2013/03/18/the-flat-build/">David Bushell's</a> two articles that go a very different route from Matt Bailey.</p>

<p>What is it? Well, it is the description of developing the frontend independently of the backend, that is with pure HTML, CSS and JavaScript, using either mockup data or a fixed dataset of some kind.</p>

<p>Matt Bailey in his pieace speaks of <a href="http://assemble.io">Assemble</a> which is based on <a href="http://handlebarsjs.com/">Handlebars</a> templates, using <a href="http://www.gruntjs.com">Grunt</a> to build HTML-pages, David Bushell <a href="https://gist.github.com/dbushell/5186122">rolls his own</a>. The big thing that both of them push (and that I adopted wholesale) is that having some kind of build system even for pure HTML, eases maintainability. The current HTML-mockups of my site looks nothing like the way the site does, because I changed something, and figured it was enough to test it in the <code>index.html</code> page.</p>

<p>It probably is a touch overkill occasionally, but by building the mockups using some kind of assembling system, it ensures that a change in one gets reflected in the others, and you can test that the JavaScript and CSS changing on one page doesn't break another.</p>

<h2 id="cases">Cases</h2>

<p>Snake case, camel case, etc, etc, etc. What are they? Well, it's not always agreed on, but here's a starting list.</p>

<h3>Snake Case (or snake_case)</h3>

<ul>
<li>Only lowercase letters (with the possible exception of the first letter)</li>
<li>Words are separated with a single underscore</li>
<li>Both Python and Ruby recommend snake case for non-constants and non-classes</li>
</ul>

<h3>Camel Case (or Pascal Style)</h3>

<ul>
<li>Each new word starts with a capital letter</li>
<li>If the first letter is a capital it's referred to as UpperCamelCase (or StudlyCaps or CapWords), if it's a lowercase letter it's lowerCamelCase (or camelCase or mixedCase)</li>
<li>.NET and JavaScript both encourage the use of Camel Case, with StudlyCaps denoting classes</li>
<li>Ruby and Python recommend StudlyCaps for class names</li>
</ul>

<h3>Hyphen-delimited</h3>

<ul>
<li>Only lowercase letters</li>
<li>Words are separated with a single hyphen</li>
<li><a href="http://csswizardry.com/2010/12/css-camel-case-seriously-sucks/">CSS is a hyphen-delimited syntax</a>(Look at that nice rant!)</li>
</ul>

<h3>UPPER_CASE_WITH_UNDERSCORES (or SCREAMING_SNAKE_CASE)</h3>

<ul>
<li>Only capital letters</li>
<li>Words are separated with a single underscore</li>
<li>Many languages/code styles recommends it for constants 

<ul>
<li>Python - <a href="http://www.python.org/dev/peps/pep-0008/#constants">Pep 8</a></li>
<li>Ruby - <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a></li>
<li>PHP - <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md">PSR-1</a></li>
</ul></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Descriptions and definitions of words commonly (or not...) used.]]></excerpt:encoded>
		<wp:post_id>1044</wp:post_id>
		<wp:post_date><![CDATA[2013-08-14 12:44:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-14 10:44:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[terminology]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="definitions"><![CDATA[definitions]]></category>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git tips and tricks</title>
		<link>http://mariehogebrandt.se/articles/git-tips-tricks/</link>
		<pubDate>Sat, 28 Sep 2013 15:14:55 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1052</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Forking, remotes and pull-requests</h2>

<p>This might be just me, but I don’t contribute that much to open source, by far not as much as I really ought to. This leads to me every time I do end up contributing needing to remember how I update my fork from the original one.</p>

<p>In the end of the day, it is actually fairly easy. Git allows for several <code>remotes</code>, IE sources to fetch changes from and/or (if you have the right permissions) to push to. The standard one, your local fork, is most often known as <code>origin</code>, though you can change the origin if necessary (I think that’s a touch out of scope for this set of tips &amp; tricks, however). So, without further ado, this is how you interact with the so-called <code>upstream</code> (that name isn’t set in stone, but it’s fairly well-known).</p>

<pre><code># You can add more remotes by name and url
git remote add upstream git@github.com:&lt;original author&gt;/&lt;repository name&gt;.git

# Fetch changes from upstream, using fetch rather than pull to not merge in changes immediately
git fetch upstream

# Now that you’ve established that you want to merge in the changes
git merge upstream/master
</code></pre>

<p>Now you can do all the changes you want in your own local repository, push them to your github repository, and create a new pull request to the upstream repository.</p>

<h2>.gitignore and the big “whoops!”</h2>

<p>I’ve been there (several times) and I’m not fully certain I believe you if you claim you haven’t. You forgot to initiate a <code>.gitignore</code> file before your first commit, or you changed your mind on where something that should be ignored was stored, or you missed something in the pattern leading to your entire set of bower-components ending up being part of your repository. Did I mention <em>whoops!</em>?</p>

<p><strong>Warning, following these instructions may lead to the loss of the files you are wanting to ignore, so keep a backup of them, or in some other way ensure that you will get them back!</strong></p>

<p>Before you do anything, make sure you <strong><em>commit your changes</em></strong>, or they are likely to get lost too. You have been properly warned, so let’s see what needs to/can be done. Also, make sure you have fixed and commited your proper <code>.gitignore</code> file before starting, or it’s going to be a tad inconvenient.</p>

<pre><code>git rm -r --cached . # This recursively removes everything from the commits
git add --all # adds/deletes files
git commit -m "Working .gitignore" # commits, using the given message
</code></pre>

<p>And if you didn’t know, you can replace <code>.</code> with a particular file, or a file pattern.</p>

<h2>Git hooks</h2>

<p>There are several places in the git workflow that you can attach shell scripts, so-called hooks. The full list can be found in <code>.git/hooks</code>, where each available hook has a sample script named by the hook and the extension <code>.sample</code>. Simply remove the extension and the hook will be active.</p>

<p>If you create your own script, you need to make sure it’s a valid shellscript, and that it has permission to be executed. I’ve been tripped up by it changing the line endings on me, so if there’s issues, <code>dos2unix</code> is always very helpful.</p>

<p>The only hook I really use at the moment is <code>pre-commit</code>, which runs right before the commit is finalized, meaning that if it fails, the commit will not go through. The one I use the most uses <code>grunt commit</code>, which runs the linting and testing tasks, and the script also uses parts of the default script:</p>

<p>[gist id=6724878]</p>

<p>I intend to gather a few more of the hooks, once I understand what exactly they do, and how to fit them into my workflow the best.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[A few nice tips and tricks for how to make working with Git more efficient.]]></excerpt:encoded>
		<wp:post_id>1052</wp:post_id>
		<wp:post_date><![CDATA[2013-09-28 17:14:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-28 15:14:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[git-tips-tricks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="gitignore"><![CDATA[gitignore]]></category>
		<category domain="post_tag" nicename="pre-commit"><![CDATA[pre-commit]]></category>
		<category domain="post_tag" nicename="remote"><![CDATA[remote]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installing Vagrant on Ubuntu</title>
		<link>http://mariehogebrandt.se/articles/installing-vagrant-ubuntu/</link>
		<pubDate>Fri, 11 Oct 2013 16:57:39 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1057</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Today I first encountered <a href="http://www.vagrantup.com">Vagrant</a> through a yeoman generator of all things. I have but touched on it, but what I’ve seen as of yet I like.</p>

<h2>Installation</h2>

<p>Before I look closer at what can be done with it, there’s the quick “gotcha” that, if you are not careful, will, erh… Get you.
First, <a href="http://downloads.vagrantup.com/">download the latest version</a> from their downloads page. After that, resist trying to install it using Ubuntu Software Center, there is a <a href="https://bugs.launchpad.net/ubuntu/+source/vagrant/+bug/1125097">known issue</a> with how several things interact, with the summary being that installing Vagrant from Ubuntu Software Center will uninstall <code>virtualbox-4.2</code> if you have it installed.</p>

<h3>How do we solve that?</h3>

<p>Easy, actually. Rather than using <code>apt-get</code> to install the package and all its’ dependencies, use <code>dpkg -i &lt;vagrant-file&gt;</code> instead to install only the package, to hell with any of its’ dependencies.</p>

<h3>Installing VirtualBox</h3>

<p>If you didn’t have VirtualBox, the best plan is to <a href="http://download.virtualbox.org/virtualbox">go to Oracle’s Download page</a> and download the latest version of VirtualBox. After that, you can either double-click on it to open up Ubuntu Software Center, or run <code>dpkg -i &lt;name-of-package</code>.</p>

<h2>Usage</h2>

<p>Vagrant’s documentation is quite well written, with the <a href="http://docs.vagrantup.com/v2/getting-started/">Quickstart</a> particularly useful, but here’s some highlights:
* <code>vagrant init</code> — Creates a <code>Vagrantfile</code> in the directory with basic settings. If called with a name and an url to a box, it will install that box, ex: <code>vagrant init precise32 http://files.vagrantup.com/precise32.box</code>, which creates a box called precise32.
* <code>vagrant up</code> — Starts the machine based on the configurations in the <code>Vagrantfile</code>
* <code>vagrant ssh</code> — Logs into the virtual machine using SSH
* <code>vagrant destroy</code> — Tears down the machine and any changes done to it</p>

<p>Future installations in this serie will cover the configuration I use, but that requires I start by getting the configuration to work!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[A headless virtual development environment that can easily be shared.]]></excerpt:encoded>
		<wp:post_id>1057</wp:post_id>
		<wp:post_date><![CDATA[2013-10-11 18:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-11 16:57:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[installing-vagrant-ubuntu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development-environment"><![CDATA[development environment]]></category>
		<category domain="category" nicename="installation"><![CDATA[Installation]]></category>
		<category domain="post_tag" nicename="vagrant"><![CDATA[vagrant]]></category>
		<category domain="post_tag" nicename="virtualbox"><![CDATA[virtualbox]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2013-10-27</title>
		<link>http://mariehogebrandt.se/articles/2013-10-27/</link>
		<pubDate>Sun, 27 Oct 2013 08:56:56 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1064</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Fixed a few bugs with my theme now, in particular to do with font-variant.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1064</wp:post_id>
		<wp:post_date><![CDATA[2013-10-27 10:56:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-27 08:56:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2013-10-27]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<category domain="post_format" nicename="post-format-status"><![CDATA[Status]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Automating tasks with Grunt and Git hooks</title>
		<link>http://mariehogebrandt.se/articles/automating-tasks-grunt-git-hooks/</link>
		<pubDate>Fri, 22 Nov 2013 16:19:12 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1068</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Requirements</h2>

<p>To be able to use this article, you are expected to have <a href="/articles/installing-yeoman-grunt-bower-and-yo-on-ubuntu/">Grunt</a> and <a href="/articles/git-and-github-on-ubuntu/">Git</a> installed.</p>

<h2>Git Hooks</h2>

<h3>What are Git Hooks?</h3>

<p>Git hooks are pre-defined scripts that run at particular points in the git workflow. They are stored in the folder <code>.git/hooks</code>, and each of them is named for the particular action they hook into, like <code>pre-commit</code>, <code>post-commit</code>, <code>post-merge</code>, etc. The language they're written in is somewhat irrelevant, as long as they're a valid shell script of one flavour or another.</p>

<h3>How can they be used?</h3>

<p>How exactly each hook can be used depends, obviously, on where it gets triggered in the flow. If you look in the folder <code>.git/hooks</code>, there are several scripts ending with <code>.sample</code>. Not too surprisingly, each of these is a sample for a hook, with something that the good people who work on Git feels might be useful. They are not activated by default, you would have to remove the <code>.sample</code>. Note that they are also not an exhaustive list of hooks.</p>

<p>The hooks come in two flavours: Some can stop the particular action they hook into (such as <code>pre-commit</code> and <code>commit-msg</code>, which both will cancel the commit if they exit with a non-zero exit code), while others react to the action they hook into, but cannot stop it from happening.</p>

<p>The main issue with git hooks is that not only are they on a per-repository basis, they are on a local per-repository basis, which means that you have to in some way automate copying the hooks over to the hooks directory after cloning the project, and you also need to automate ensuring that the hooks are up-to-date. Of course, it is possible to leave it up to each user to remember to activate the hooks, but we can do better than that, no?</p>

<p>Enter Grunt, stage left!</p>

<h2>Grunt Githooks</h2>

<p>The Githooks task by <a href="http://rhumaric.com/">Romaric Pascal</a> takes a few config options (including the possibility of a specialized template), and when you run <code>grunt githooks</code>, it creates the hooks you've defined. By default they're written in NodeJS, since that's cross-OS and will be installed if you're running grunt tasks. You can define that it should be another language, however, especially if you're wanting to add the hook to a script already defined.</p>

<p>As this article would be far too exhaustive with all options, details of the tasks can be found linked in the references below.</p>

<p>To install, run <code>npm install --save-dev grunt-githooks</code> in the terminal, just like any other grunt task.</p>

<h2>Example git hooks</h2>

<p>To get the full source code, <a href="https://github.com/Melindrea/grunt-githooks-example">refer to this github repository</a>. It runs three different hooks, one of which is running a grunt task.</p>

<p>All templates/config files for the tasks are expected to reside in <code>hooks</code>, and outside of that it follows the standard Webapp generator of yeoman, with some of the unnecessary cruft cleaned away.</p>

<h3>Pre-commmit</h3>

<p>This is the most common git hook I've used. I want to ensure that nothing silly gets into the live site, where "silly" can range from syntax errors, to whitespace errors, to breaking tests, all depending on the particular situation of your project. Mine assumes you have a task in your Gruntfile named <code>commit</code>, with whichever tasks are relevant for your project.</p>

<pre><code>grunt.initConfig({
    githooks: { // Definition of the task config
        stage: { // Name it something relevant
            options:{
                template: 'hooks/stage.js.hbs' // the Handlebars template the hook is rendered from
            },
            // Each hook can be defined here with whatever task is used
            'pre-commit': 'commit' 
        }
    }
)};
</code></pre>

<p>Now, based on the article by <a href="http://gmurphey.com/2012/12/22/grunt-pre-commit-hook-for-release-tasks.html">Garrett Murphey</a> I came to a few conclusions on how I want to build up the hook. In particular, the pre-commit tasks should:</p>

<ul>
<li>Not run on rebase</li>
<li>Only run on staged changes</li>
</ul>

<p>With help from Romaric Pascal I found <a href="http://viget.com/extend/grunt-getting-started-with-git-hooks">this article</a> which shows how to accomplish the second point, and with some experimentaion I accomplished the first point in NodeJS (using <code>execSync</code> and the <code>exec</code> function rather than the <code>run</code> function).</p>

<pre><code>var exec = require('child_process').exec;
// https://npmjs.org/package/execSync
// Executes shell commands synchronously
var sh = require('execSync').run;
var branchName = require('execSync').exec('git branch | grep \'*\' | sed \'s/* //\'').stdout;

// Don't run on rebase
if (branchName !== '(no branch)') {
    exec('git diff --cached --quiet', function (err, stdout, stderr) {
        /*jshint unused: false*/
        'use strict';

        // only run if there are staged changes
        // i.e. what you would be committing if you ran "git commit" without "-a" option.
        if (err) {
            // stash unstaged changes - only test what's being committed
            sh('git stash --keep-index --quiet');

            exec('grunt {{task}}', function (err, stdout, stderr) {
                console.log(stdout);

                // restore stashed changes
                sh('git stash pop --quiet');

               var exitCode = 0;
               if (err) {
                   console.log(stderr);
                   exitCode = -1;
               }
               process.exit(exitCode);
           });
        }
    });
}
</code></pre>

<p>Note the <code>/*jshint unused: false*/</code> in the first call to <code>exec</code>. It's there because otherwise jshint (yes, I lint my hooks as thoroughly as I do my other JavaScript files) would object to some of the variables not being used.</p>

<p>Could you test for other things in the template? Of course, this is a start to give you a feel for it. As long as there's a specific pass/fail condition and a fail exits with a non-zero code you can test for other things. The sample hook also tests for non-ascii file names and whitespace errors.</p>

<h3>Running updates of dependencies when they've changed</h3>

<p>Okay, so the title of this section might be slightly of a misnomer. It's not technically it running updates whenever a dependency has changed, but rather that when you pull from origin (or, for that matter, from upstream), you want it to automatically update any dependencies <em>if there have been changes</em>.</p>

<p>As each project might have different files that should be checked, the tasks reads a JSON-file, <code>hooks/data/update.json</code>, which holds several objects with a file and a command defined.</p>

<pre><code>[
    {
        "file": "package.json",
        "command": "npm update"
    }
]
</code></pre>

<p>The template, inspired by <a href="http://stackoverflow.com/a/16853458">this post on StackOverflow</a> uses git diff to check if the file has changed, and if it has, it will log a response to that effect before running the update command.</p>

<pre><code>var object = require('../../hooks/data/update');
for (var i in object) {
    file = object[i].file;
    command = object[i].command;
    fileChanged = (shOutput('git diff HEAD@{1} --stat -- ' + file + ' | wc -l').stdout &gt; 0); 

    if (fileChanged) {
        console.log(file + ' has changed, dependencies will be updated.');
        sh(command);
    }
}
process.exit(0);
</code></pre>

<p>Note that this doesn't use any grunt tasks at all. There is no technical way to deal with that in the current task, but you don't really need to use the bound values in your template unless you want to. The various options for binding values to the template are based on using the default template supplied by this task.</p>

<p>Okay, so that deals with the options and the template. What about the hooks?<code>Well, depending on how you call the</code>git pull`, it will trigger one out of two hooks.</p>

<h4>Git pull, no arguments</h4>

<p>A git pull without arguments is a <code>git fetch</code> followed by a <code>git merge</code>, so the best place for an update hook in that case is the <code>post-merge</code> hook.</p>

<h4>Git pull --rebase</h4>

<p>If you're using <code>--rebase</code>, on the other hand, it runs <code>git fetch</code> followed by <code>git rebase</code>, which means that the <code>post-checkout</code> hook is the proper place for one. This, obviously, means we'll need to bind two hooks to the same template. We can do that!</p>

<pre><code>grunt.initConfig({
    githooks: { // Definition of the task config
       update: { // Name it something relevant
            options: {
                template: 'hooks/update.js.hbs' // the Handlebars template the hook is rendered from
            },
            // Each hook can be defined here with whatever task is used
            'post-merge': true,
            'post-checkout': true 
        }
    }
)};
</code></pre>

<h2>Moving forward</h2>

<p>Alright, so now we have three hooks that gets ran at different points in the workflow. From what I've read in the docs of grunt githooks you might be able to define several snippet-templates and mix-and-match, but I haven't yet explored that.</p>

<p>One final thing to ease the use of this, however:</p>

<h3>Automatically running grunt githooks after npm is installed</h3>

<p>So, we've automated it running linting/tests/etc before every commit, and that it will check if dependencies needs to be updated after every pull. We still need to run <code>grunt githooks</code> to initiate the hooks, yes?</p>

<p>Yes, but NodeJS is smart and can do it for us, by defining a postinstall script in <code>package.json</code>. Just paste the following lines into your <code>package.json</code> file, and running <code>npm install</code> will automatically run <code>grunt githooks</code>.</p>

<pre><code>"scripts": {
     "postinstall": "grunt githooks"
}
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://githooks.com/">Complete list of Git Hooks</a></li>
<li><a href="https://github.com/rhumaric/grunt-githooks">Grunt Githooks</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Using Grunt and Git to speed up a more automatic workflow (Grunt and Git, sitting in a tree, K-I-S-S-I-N-G)]]></excerpt:encoded>
		<wp:post_id>1068</wp:post_id>
		<wp:post_date><![CDATA[2013-11-22 18:19:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-11-22 16:19:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[automating-tasks-grunt-git-hooks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="grunt"><![CDATA[grunt]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Grunt with PHP Quality Assurance Tools</title>
		<link>http://mariehogebrandt.se/articles/using-grunt-php-quality-assurance-tools/</link>
		<pubDate>Sun, 08 Dec 2013 15:58:55 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1075</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The irony is not lost on me, that is certain. The language I work in the most is PHP, but with having grown a very soft spot for Grunt, I've been forced to learn how to use NodeJS in a more efficient manner, in particular for writing tasks and git hooks. I've <a href="/articles/automating-tasks-grunt-git-hooks/">mentioned previously how my git hooks are built</a>, but this particular article will not be touching on that, but rather on various tasks used as wrappers around tools that exists in the PHP systems.</p>

<p>So, why Grunt? Why my insistance to shoehorn everything into it? Well, in my defense, it's not <em>everything</em> I'm trying to shoehorn into it, but rather all tasks that should be repeatable. It's not a case of me being too "lazy" to remember that to lint all of my files I just need to run <code>find . -name "*.php" -exec php -l {} \; | grep "Parse error"</code>, it's that it's a waste of time that could've been spent better. Prior to finding Grunt, I would've either made it as an alias, or save it as a bash script, but both of those have the issue of portability. Using Grunt allows me to focus more on the actual coding -- server-side or client-side -- and less on ensuring that I'm checking syntax, tests, etc.</p>

<h2>Quality Assurance Tools</h2>

<p>Now, a disclaimer: I've not managed to fully implement all of these tools into my workflow. Some of them have well-written grunt tasks, and those will be noted. Others have abandoned grunt tasks, and those I will note with an alternate way of getting a more useful task until it is no longer abandoned, and the final category had no grunt tasks, so I've written a basic one that fits whatever options seemed likely for me as I looked over how it's used. Those can all be found -- alongside the other code for this guide -- on <a href="https://github.com/Melindrea/phpqatools-grunt">Github</a>, under the directory <code>tasks</code>. The file structure in the <code>Gruntfile</code> follows exactly that repository.</p>

<p>The set of tools I've implemented have all been collected from the <a href="http://phpqatools.org/">PHP Quality Assurance Toolchain</a>, where rather than using the PEAR Installer we will use <a href="http://getcomposer.org/">Composer</a>. Each tool will be installed local in the project that gets built up.</p>

<h2>Assumptions</h2>

<p>Obviously, you need to have <a href="/articles/installing-yeoman-grunt-bower-and-yo-on-ubuntu/">installed Grunt</a>. You also need to have cURL installed, which you probably do, especially if you followed my above-mentioned article to install Grunt, otherwise it's still easy: <code>sudo apt-get install curl</code>. Finally, you'll need to have <a href="/articles/git-and-github-on-ubuntu/">installed Git</a>, as the PHP project we will be working on is the <a href="https://github.com/laravel/laravel">basic Laravel starting page</a>.</p>

<p>As far as PHP, you will need version 5.3.7+, with:</p>

<ul>
<li>mCrypt</li>
<li>intl</li>
<li>XSL</li>
<li>Graphviz</li>
</ul>

<p><code>sudo apt-get install php5-mcrypt php5-intl php5-xsl graphviz</code></p>

<h2>Task categories</h2>

<p>There are two specific sets of tasks that are being introduced. The first one is what I'd refer to as "blocking" tasks. They will throw an error if their conditions aren't fulfilled, and I use them in my <code>pre-commit</code> git hook, ensuring that I don't commit anything with errors in it.</p>

<p>The second set of tasks are probably to be ran occasionally, at whatever interval is deemed practical for your particular setup. They will just report on whatever it is they're dealing with, and though it's outside the scope of this guide, they should probably be used for statistic and other things. Maybe a nice set of graphs showing how the complexity of the project grows over time?</p>

<h2>Setup</h2>

<p>As mentioned above, the base for the PHP (because I don't want to write a whole bunch of PHP just to showcase tasks) is going to be Laravel. Go to whatever directory you're wanting to work in and clone the repository (I'm assuming the same name of the repository as mine: phpqatools-grunt): <code>git clone git@github.com:laravel/laravel.git phpqatools-grunt</code>. Be aware that not everything is set up properly just yet, we'll get to the final bits of it further down.</p>

<p>You may also want to run <code>git remote rm origin</code> to remove the knowledge that the project has of the Laravel repository it is clone from. I at least find the "Your branch is ahead of 'origin/master' by ..." message to be untidy.</p>

<h3>Gitignore</h3>

<p>Open <code>.gitignore</code> and replace the current one with the following:</p>

<pre><code>/bootstrap/compiled.php
/vendor
composer.phar
.DS_Store
Thumbs.db
*.log
/node_modules

.*
!.gitignore
!.jshintrc
!.bowerrc
!.editorconfig
!.travis.yml
!.gitattributes
!.htaccess
*~
</code></pre>

<h3>Package.json</h3>

<p>After that, we'll set up the NodeJS part of the project required for Grunt. If you run <code>npm init</code> it will guide you through a set of options, or you can just create a new file called <code>package.json</code> in the root of the project, with the following content:</p>

<pre><code>{
  "name": "phpqatools-grunt",
  "version": "0.0.0",
  "description": "Showing off using Grunt and the PHP Quality Assurance Toolchain to limit code smell in PHP",
  "private": true,
  "scripts": {
    "test": "grunt test --verbose"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Melindrea/phpqatools-grunt.git"
  },
  "author": "Marie Hogebrandt",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Melindrea/phpqatools-grunt/issues"
  },
  "devDependencies": {
    "time-grunt": "~0.2.3",
    "load-grunt-tasks": "~0.2.0",
    "grunt": "~0.4.2",
    "grunt-jsvalidate": "~0.2.2",
    "jshint-stylish": "~0.1.4",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-jsonlint": "~1.0.4"
  }
}
</code></pre>

<p>As you can see, it includes a couple of basic dependencies, most of which are there to check that the various config files are valid. Two particular sections I want to draw your attention to closer:</p>

<pre><code>"scripts": {
    "test": "grunt test --verbose"
  }
</code></pre>

<p>Once you have a grunt file, if you run <code>npm test</code>, it will run the <code>grunt test</code> task verbosely. Probably not too useful in itself, but it allows for hooking the project into Travis or similar CI that automatically runs <code>npm test</code>.</p>

<pre><code>"private": true
</code></pre>

<p>This is pretty much what it says on the can. It ensures you don't accidentally post it onto NPM until you're good and ready.</p>

<p>Finally, run <code>npm install</code> to pull in all the dependencies from NPM. This might take a while, like all installs.</p>

<h3>Gruntfile</h3>

<p>Create a file called <code>Gruntfile.js</code> in the root, with the following content:</p>

<pre><code>'use strict';

// # Globbing
// for performance reasons we're only matching one level down:
// 'test/spec/{,*/}*.js'
// use this if you want to recursively match all subfolders:
// 'test/spec/**/*.js'

module.exports = function (grunt) {
    // show elapsed time at the end
    require('time-grunt')(grunt);
    // load all grunt tasks
    require('load-grunt-tasks')(grunt);
    grunt.loadTasks('tasks');

    var directoriesConfig = {
        composer: 'vendor',
        composerBin: 'vendor/bin',
        reports: 'logs',
        php: 'app'
    };

    grunt.initConfig({
        directories: directoriesConfig,
        jshint: {
            options: {
                jshintrc: '.jshintrc',
                reporter: require('jshint-stylish')
            },
            all: [
                'Gruntfile.js'
            ]
        },
        jsvalidate: {
            files: [
                'Gruntfile.js'
            ]
        },
        jsonlint: {
            files: [
                '*.json'
            ]
        }

    });

    grunt.registerTask('default', [
        'test'
    ]);

    grunt.registerTask('test', [
        'jsvalidate',
        'jshint',
        'jsonlint'
    ]);
};
</code></pre>

<p>There are two tasks registered, <code>default</code> and <code>test</code>. There's also three configs defined, adding three more tasks: <code>jshint</code>, <code>jsvalidate</code> and <code>jsonlint</code>. In a full-stack environment, those would also likely affect files in the project itself, but in this one they only check the Gruntfile and the JSON config files.</p>

<p>One more thing needs to be added to ensure those tasks run smoothly: A <code>.jshintrc</code> file. For further information about the various linting options, go to <a href="">JSHint's webpage</a>, but for now create a file in the root of the project named <code>.jshintrc</code>, and paste in the following code:</p>

<pre><code>{
    "node": true,
    "browser": true,
    "esnext": true,
    "bitwise": true,
    "camelcase": true,
    "curly": true,
    "eqeqeq": true,
    "immed": true,
    "indent": 4,
    "latedef": true,
    "newcap": true,
    "noarg": true,
    "quotmark": "single",
    "regexp": true,
    "undef": true,
    "unused": true,
    "strict": true,
    "trailing": true,
    "smarttabs": true,
    "predef": [
        "Modernizr",
        "$",
        "jQuery"
    ]
}
</code></pre>

<p>If you run <code>grunt</code> from the root now, it will ... give you an error. Whoops, Tasks directory not found!</p>

<p>There are three sets of tasks/modules loaded in this file:</p>

<pre><code>// A module that prints out the time at the end
require('time-grunt')(grunt);

// Load all grunt tasks from NPM that starts with grunt-
require('load-grunt-tasks')(grunt);

// Load all grunt tasks that are defined locally, currently none
grunt.loadTasks('tasks');
</code></pre>

<p>Create the tasks directory: <code>mkdir tasks</code>, and after that run <code>grunt</code>. If there are any issues with either the Gruntfile or the configs, fix them.</p>

<h3>Composer</h3>

<p>As alluded to above, the installation of Laravel is not complete, nor do we have all the tools to install the tasks and such. Composer is a tool, like Bower for frontend, NPM for NodeJS and Bundler for Ruby, for dependency management for PHP. The file that handles what packages to install is called <code>composer.json</code> and is already defined with the dependencies for Laravel, but you need to get Composer. You can install it locally or globally and in a few different ways, where I prefer keeping it local to the project and not checking it into version control. You'll need to run just two commands:</p>

<pre><code># Download the installer to check that you have all the settings, which in
# turn downloads the latest version of the file into the current directory
curl -sS https://getcomposer.org/installer | php

# Assuming that you didn't need to adjust any settings, run the installation of
# dependencies (you may want to get another coffee ...)
php composer.phar install
</code></pre>

<p>I recommend looking over the documentation to see what you can do with Composer, since this article will only be touching on it briefly. Like Bundler for Ruby, it creates a lock-file that gives which versions of the packages are installed, to ensure similar working environments. Laravel by default does not add <code>composer.lock</code> into version control, which is one of the changes in the <code>.gitignore</code> file.</p>

<h2>Diving into the deep end</h2>

<p>Make sure you have your terminal at the ready and your <code>Gruntfile.js</code> open. We will work through the tasks working off of mainly those, with the occasional new file put into tasks.</p>

<h3>Commit tasks</h3>

<h4>PHP-lint</h4>

<p>Let's start with the most basic of tasks: linting! PHP comes equipped with a basic syntax check. By running <code>php -l &lt;path/to/file&gt;</code>, it will check if a given file has any syntax errors in it, such as stray lack of semicolon causing a <code>PHP Parse error:  syntax error, unexpected end of file</code>. It's not exactly the most advanced of features, but it's a good failsafe before you run any other checkers.</p>

<p>It's corresponding grunt task is, not too surprisingly, <a href="https://npmjs.org/package/grunt-phplint">grunt-phplint</a> by Jacob Gable. Below the configuration for <code>jsonlint</code> add the following.</p>

<pre><code>phplint: {
    options: {
        swapPath: '/tmp'
    },
    all: [
        '&lt;%= directories.php %&gt;/**/*.php'
    ]
}
</code></pre>

<p>If you aren't too well-versed in how to write JavaScript objects, each of the configs needs to be separated by a comma, but there should be no comma after the very last configuration. Of course, if you do forget, you're likely to run the task and encounter a <code>SyntaxError: Unexpected identifier</code> centered on the <code>phplint</code> word.</p>

<p>Another fun thing error that you might encounter is <code>Warning: Task "phplint" not found. Use --force to continue</code> which is just as straightforward as it sounds, at least in this case: The task is not installed. Let's remedy that quickly by running <code>npm install --save-dev grunt-phplint</code>. The <code>--save-dev</code> flag means that it'll write it into the <code>package.json</code> file. If you want to save it as a normal dependency (rather than development) the flag is instead <code>--save</code>.</p>

<p>Finally, run <code>grunt phplint</code> and it's done.</p>

<p>Let's look a bit closer at the config. Other options can be found in the documentation for the task, but I explicitely set the path for where the task should cache files to <code>/tmp</code>. I also (like I will more further into the guide) used a variable defined higher up in the <code>Gruntfile.js</code> in which files to lint. I like using configurations to be able to change directories and such to whatever structure I'm using.</p>

<h4>PHP Code Sniffer</h4>

<p>Code sniffing always sounds so incredibly weird to me. It sounds like a personal problem, though maybe code smell is as well! At any rate, I use the <a href="http://www.squizlabs.com/php-codesniffer">PHP CodeSniffer from Squiz Labs</a>, which per their <a href="https://github.com/squizlabs/PHP_CodeSniffer">Github page</a> <q>tokenises PHP, JavaScript and CSS files and detects violations of a defined set of coding standards</q>. (However, I haven't used it for JavaScript or CSS, and unsure on if I will. After all, Sass deals with spitting out formatted CSS, and I trust JSHint to be better for actual code issues with my JavaScript.)</p>

<p>To install the required package and corresponding grunt task run:</p>

<pre><code>php composer.phar require --dev squizlabs/php_codesniffer:1.*
npm install --save-dev grunt-phpcs
</code></pre>

<p>The <a href="https://npmjs.org/package/grunt-phpcs">grunt task PHPCS</a> is created by Sascha Galley and is a fairly good one-to-one implementation of the tool. Below phplint, add the following configuration:</p>

<pre><code>phpcs: {
    application: {
        dir: '&lt;%= directories.php %&gt;'
    },
    options: {
        bin: '&lt;%= directories.composerBin %&gt;/phpcs',
        standard: 'PSR2',
        ignore: 'database',
        extensions: 'php'
    }
}
</code></pre>

<p>Not that I define where the binary is stored, that it should only sniff PHP-files and that it should ignore the <code>database</code> directory. That is in fact the <code>app/database</code> directory, because it looks for patterns below the directory it is running in, but that's an aside.</p>

<p>Finally, the standard is <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md">PSR2</a>. It's my preferred coding style, but it can obviously handle any kind of standard. Now, here's one issue with using the Laravel base to test these things out: Despite <a href="http://four.laravel.com/docs/contributing">Laravel following PSR-1</a>, the base project doesn't. Facepalm. Run <code>grunt phpcs</code> to confirm this, if you want to see what kind of errors it throws.</p>

<p>You now have two choices:</p>

<ol>
<li>Change the standard to PSR1 and just add a namespace to the following files:

<ul>
<li>app/tests/TestCase.php (needs to extend \Illuminate\Foundation\Testing\TestCase)</li>
<li>app/tests/ExampleTest.php</li>
<li>app/controllers/BaseController.php</li>
<li>app/controllers/HomeController.php</li>
<li>app/models/User.php (needs to extend \Eloquent)</li>
</ul></li>
<li>Keep the PSR2 and go through the various issues. It's mainly whitespace issues. <a href="https://github.com/Melindrea/phpqatools-grunt/commit/f9ed56544ec8bd51cbd72b9e9af106d274f742fc">This commit</a> of the test repository has the PSR2 version, if you want to just copy the <code>app</code> directory from it.</li>
</ol>

<p>Either choice, once you've gone through the changes (or ignored the rest of this task, up to you!), run <code>php composer.phar dump-autoload --optimize</code>, which will recreate the autoload files (important for Laravel).</p>

<p>Here's two bonus tricks:</p>

<ul>
<li>If you are prepared to let a program run through your code (I'm not fully certain I am), there's the <a href="https://github.com/fabpot/PHP-CS-Fixer">PHP-CS-Fixer</a> (which even has a grunt task). As much as I like automation, though, I overall prefer to have better control over that.</li>
<li><p>If you only have tabs rather than spaces <code>expand</code> will do the trick in most *nix systems. Go into the directory where you want to do any changes and run the following command (copy all of it):</p>

<p>find . -name "*.php" |while read line
do
expand -it4 $line > $line.new
mv $line.new $line
done</p></li>
</ul>

<p>If you go with either of those, make sure you have everything in version control or in some other way have backups.</p>

<h4>PHP-Unit</h4>

<p>Because you do write unit tests that you run with every commit, right? Right? ... Yeah. Me too. At any rate, the Laravel project comes pre-equipped with a test unit test, so let's get the PHP Unit up and running with grunt.</p>

<p>First, remove the <code>phpunit.xml</code> file at the root. You can keep it (the task will read from it), but at least part of what I'm wanting to do here is to gather configurations in one format, so for that reason, remove it. Now install PHP Unit:</p>

<pre><code>php composer.phar require --dev phpunit/phpunit:3.7.*
npm install --save-dev grunt-phpunit
</code></pre>

<p>While we're waiting, <a href="http://phpunit.de/manual/current/en/index.html">what is PHP Unit</a>? It's one of the primary unit testing frameworks for PHP, with the main contributor being Sebastian Bergmann. It's a bit too large to cover in the scope of this article, obviously, but there are some very good tutorials, and the site has good documentation. The task is maintained by Sascha Galley, and is like the above-mentioned grunt-phpcs task a good implementation. All options that one could write in the <code>phpunit.xml</code> configuration file can be handled in the Gruntfile.</p>

<p>Below <code>phpcs</code> add the configuration:</p>

<pre><code>phpunit: {
    classes: {
        dir: '&lt;%= directories.php %&gt;/tests'
    },
    options: {
        bin: '&lt;%= directories.composerBin %&gt;/phpunit',
        bootstrap: 'bootstrap/autoload.php',
        staticBackup: false,
        colors: true,
        noGlobalsBackup: false
    }
}
</code></pre>

<p>The bootstrap is which file it should load before running the tests, and the dir is obviously where the classes are stored.</p>

<p>Run <code>grunt phpunit</code>, which should give you a green line with the text <code>OK (1 test, 1 assertion)</code></p>

<h4>Final words</h4>

<p>That was the last of the blocking, pre-commit tasks. To get all of them together, add <code>phplint</code>, <code>phpcs</code> and <code>phpunit</code> to the <code>test</code> task and run <code>grunt</code>. It should pass, if not, fix it before the next section. Or, you can just copy the files from <a href="https://github.com/Melindrea/phpqatools-grunt/commit/986363b34a0369d321a9f5ba2757f78f0d6133f8">this commit</a>, if you prefer that.</p>

<h3>Reporting tasks</h3>

<p>These tasks are the ones that go through the code and write some kind of report over what it finds. I'll admit that I'm not as familiar with most of them, and they don't seem to be as commonly used. The default directory for all of these reports is <code>logs/&lt;taskname&gt;</code>, though it can obviously even be outside of the root. Maybe using <code>grunt-gh-pages</code> or a similar task to push the results to a different repository entirely.</p>

<p>The first thing to do here is to install two helper tasks. One is <code>grunt-contrib-clean</code>, which is a task to delete all files under a specific directory, and/or delete a specific directory. It's part of the core plugins for GruntJS, as evidenced by the <code>contrib</code> part of the name. To install: <code>npm install --save-dev grunt-contrib-clean</code></p>

<p>The second one is written by Sindre Sorhus and is called <code>grunt-shell</code>. Not too surprisingly, it allows for running shell commands. They're fairly flexible in what you can do with them, and if what you're needing is a few fairly simple and straightforward shell commands, it's quite useful. One use I've gotten out of it is running a series of update commands; Rather than needing to run <code>npm update &amp;&amp; bower update &amp;&amp; bundle update &amp;&amp; pip install -r "requirements.txt"</code>. To install: <code>npm install --save-dev grunt-shell</code></p>

<h4>PHP Docs</h4>

<p>I like documentation. I don't like writing documentation, but I do like documentation. Especially in a larger team (and a larger project), I like the idea of being able to easily run one command to generate a good, cohesive overview of the project and its' classes and dependencies. Since this is mainly an article on Grunt, I will use more-or-less default options, and leave any tweaks to the templates etc for your own choices. For <a href="http://www.phpdoc.org/">more information on phpDocumentor go here</a>.</p>

<p>To install with Composer, run <code>php composer.phar require --dev phpdocumentor/phpdocumentor:2.*</code>. As a warning, it's fairly big and has a lot of requirements. It's why you need XSL support for your PHP, and Graphviz. The resulting documentation is pretty rad, though.</p>

<p>Now, documentation is one of the things that I find to be least useful to keep all of it, so the final phpdocs task will start with cleaning out the old files and then move into generating the documentation. You'll want to add <code>logs/phpdocs/phpdoc-*</code> to the <code>.gitignore</code>-file if you're planning on checking in the documentation into any kind of version control system.</p>

<p>There is actually a task for the documentor. It's called <code>grunt-phpdocumentor</code>, but the last activity was 8 months ago. There are a couple of forks of it, but none that has been published to NPM, and the latest version there has some debilitating bugs. The solution I'm going to be introducing is to copy in the relevant file (phpdocumentor.js) into the <code>tasks</code> directory. You will also need to install lodash when using this task: <code>npm install --save-dev lodash</code>.</p>

<p>Choose which task you want to install from the ones below.</p>

<dl>
    <dt>Original task</dt>
    <dd><code>curl -o tasks/phpdocumentor.js https://raw.github.com/gomoob/grunt-phpdocumentor/master/tasks/phpdocumentor.js</code></dd>

    <dt>Sascha Galley's fork adds support for template</dt>
    <dd><code>curl -o tasks/phpdocumentor.js https://raw.github.com/SaschaGalley/grunt-phpdocumentor/master/tasks/phpdocumentor.js</code></dd>

    <dt>My own fork adds support for ignore</dt>
    <dd><code>curl -o tasks/phpdocumentor.js https://raw.github.com/Melindrea/grunt-phpdocumentor/master/tasks/phpdocumentor.js</code></dd>
</dl>

<p>Now, for the Gruntfile. Start with copying in the cleaning config wherever you feel it's convenient:</p>

<pre><code>clean: {
    phpdocumentor: '&lt;%= phpdocumentor.dist.target %&gt;'
},
</code></pre>

<p>Then copy in the phpdocumentor config after phpunit:</p>

<pre><code>phpdocumentor: {
    dist: {
        bin: '&lt;%= directories.composerBin %&gt;/phpdoc.php',
        directory: '&lt;%= directories.php %&gt;',
        target: '&lt;%= directories.reports %&gt;/phpdocs',
        ignore: [
            '&lt;%= directories.php %&gt;/database/*'
        ]
    }
}
</code></pre>

<p>The cleaning task (<code>grunt clean:phpdocumentor</code>) removes the directory, the phpdocumentor task (<code>grunt phpdocumentor</code>) goes through all the files under the <code>app</code> directory (except database) and reports on what it finds. The files all go into <code>logs/phpdocs</code>, as per that configuration.</p>

<p>Finally, let's add a new task, <code>phpdocs</code>, which first cleans the directory and then regenerates the docs. Add the following bit of code under the <code>test</code> task.</p>

<pre><code>grunt.registerTask('phpdocs', [
    'clean:phpdocumentor',
    'phpdocumentor'
]);
</code></pre>

<p>Run <code>grunt phpdocs</code> and bask in the glory of shiny documentations! Bask, I tell you!</p>

<h4>PHP Loc</h4>

<p>Per <a href="https://github.com/sebastianbergmann/phploc">its' homepage</a>, phploc is <q>tool for quickly measuring the size and analyzing the structure of a PHP project</q>. It's one of the tools I'm still trying to wrap my head around, so this very first version of the grunt task is going to utilize <code>grunt-shell</code>. The theory behind this is that we want to have something that steadily reports on the growing complexity (most likely consumed by a cron job somewhere -- possibly ran by a cron job somewhere). A really cool example from the main readme spits out a CSV file with the rows being tied to a repository. I chose not to use that one in my command, but before getting ahead of ourselves, let's install it: <code>php composer.phar require --dev "phploc/phploc=*"</code>.</p>

<p>I am likely to eventually write a task for it, but using the shell task works good for the beginning usecase, which will just write an XML-file with the results into <code>logs/phploc/&lt;the current datetime&gt;.xml</code>, based on the files in <code>app</code>.</p>

<p>Below the <code>clean</code> config, paste in the <code>shell</code> config:</p>

<pre><code>shell: {
    phploc: {
        command: [
            'mkdir -p &lt;%= directories.reports %&gt;/phploc',
            'php &lt;%= directories.composerBin %&gt;/phploc --log-xml &lt;%= directories.reports %&gt;/phploc/&lt;%= grunt.template.today("isoDateTime") %&gt;.xml &lt;%= directories.php %&gt;'
        ].join('&amp;&amp;')
    }
},
</code></pre>

<p>Notice the use of <code>grunt.template.today()</code>, which is what names the file. The second thing to note is that I'm actually joining two commands. That is because if the directory doesn't exist, the file isn't saved where it should be.</p>

<p>Finally, add another task below phpdocs:</p>

<pre><code>grunt.registerTask('phploc', [
    'shell:phploc'
]);
</code></pre>

<p>The main reason I'm adding that task is so that I don't use the <code>shell</code> syntax more than necessary, as I often use the shell task for a quick-and-dirty version of tasks I intend to actually write later.</p>

<p>Run <code>grunt phloc</code> for the very first XML file.</p>

<h4>Sensio Labs Security Checker</h4>

<p>Though this does not replace doing your own research, it's at least a good idea to implement some kind of automatic check that your components aren't Naughty (boy I wish there was something like this written for bower as well, but I know how much effort goes into it, so it's not something I can do, at least not at the moment). Alright, now that we're past that parenthesis, do <a href="https://github.com/sensiolabs/security-checker">check out their web page</a>, which has at least a touch more details.</p>

<p>Let's start by installing the requirement using Composer: <code>php composer.phar require --dev "sensiolabs/security-checker:1.3.*@dev"</code>.</p>

<p>This also uses <code>grunt shell</code>, so add another target below phploc:</p>

<pre><code>securityChecker: {
    command: 'php &lt;%= directories.composerBin %&gt;/security-checker security:check',
    options: {
        stdout: true
    }
}
</code></pre>

<p>Note the option of <code>stdout: true</code>, that means that it will print the output to the console. You could obviously save the result, but I at least feel it would be more effort than it's worth. If I end up finding something with a known vulnerability, I might rework it so that it logs something if it finds it.</p>

<p>Finally you'll want another task, which I'm going to name <code>vulnerability</code>, since the theory here is that we might eventually get that frontend check that I mentioned earlier, or other things to check the vulnerability:</p>

<pre><code>grunt.registerTask('vulnerability', [
    'shell:securityChecker'
]);
</code></pre>

<h4>PHP Mess Detector &amp; PHP Depend</h4>

<p><a href="http://phpmd.org/">PHP Mess Detector</a> is a spin-off on <a href="http://pdepend.org/">PHP Depend</a>. Both projects have (or so I <a href="http://stackoverflow.com/a/6009665">have been assured by StackOverflow</a>) their place in the reporting. PHPMD also depends on having PHP Depend installed, which is why the two tasks are written under the same header. I will start with PHP Mess Detector, since it has a <a href="https://github.com/alappe/grunt-phpmd">grunt plugin</a> written by Andreas Lappe.</p>

<p>First, install the two dependencies in composer:</p>

<pre><code>php composer.phar require --dev "phpmd/phpmd:1.4.*"
php composer.phar require --dev "pdepend/pdepend:1.1.*"
</code></pre>

<h5>PHP Mess Detector</h5>

<p>The grunt plugin is on NPM, so to install it, run <code>npm install --save-dev grunt-phpmd</code>. The configuration I've decided on is the following, paste that in below the configuration for phpdocumentor:</p>

<pre><code>phpmd: {
    application: {
        dir: '&lt;%= directories.php %&gt;'
    },
    options: {
        rulesets: 'codesize,unusedcode,naming',
        bin: '&lt;%= directories.composerBin %&gt;/phpmd',
        reportFile: '&lt;%= directories.reports %&gt;/phpmd/&lt;%= grunt.template.today("isoDateTime") %&gt;.xml'
    }
}
</code></pre>

<p>I have chosen to do one target that checks for all three things it might find problematic, and then stores the resulting file in <code>logs/phpmd/&lt;todays datetime&gt;.xml</code>. If you do run the task immediately, you'll notice that it complains about the directory not existing. My solution is to add another helper plugin, <code>grunt-mkdir</code>. As a note, I could do what I did when I had to create a directory for <code>phploc</code>, which was to use the shell directly. The reason I'm not is because I'm not using the shell for <code>phpmd</code>, and there is a <a href="https://github.com/rubenv/grunt-mkdir">task available</a> to install (written by Ruben Vermeersch). Run <code>npm install --save-dev grunt-mkdir</code>, and then paste in the configuration below the <code>shell</code> configuration:</p>

<pre><code>mkdir: {
    phpmd: {
        options: {
            create: ['&lt;%= directories.reports %&gt;/phpmd']
        },
    }
},
</code></pre>

<p>So, since automation is the name of the game, we want to ensure that <code>grunt mkdir:phpmd</code> gets ran before <code>phpmd</code>. To do this, I will register a task <code>phpmdMk</code> that runs first the <code>mkdir:phpmd</code> and then <code>phpmd</code>.</p>

<p>Below the added task <code>vulnerability</code> add the following:</p>

<pre><code>grunt.registerTask('phpmdMk', [
    'mkdir:phpmd',
    'phpmd'
]);
</code></pre>

<p>You can now run <code>grunt phpmdMk</code>, and it will act as expected.</p>

<p>As a final note, there is a discussion on the phpmd plugin on whether it should be a blocking task. At currently it will return success no matter what the result of the detector is, but there are discussions on adding a configuration to view any errors reported as a failure of the task, at which point it could, theoretically, be put in a pre-commit hook as well.</p>

<h5>PHP Depend</h5>

<p>There is no task for PHP Depend. I may decide to write one for myself once I've actually figured out what I want to do with all that nice data, but until then I wrote a small function that uses the <code>shell</code> task.</p>

<p>It takes the current ISO DateTime and creates a directory <code>logs/pdepend/&lt;datetime&gt;</code>. In that directory the summary is put (named summary.xml), a JDepend chart is created, named chart.svg, and finally an overview pyramid (pyramid.svg) is created.</p>

<p>Paste in this target below the securityChecker target of the shell task:</p>

<pre><code>pdepend: {
    command: function () {
        var now = grunt.template.today("isoDateTime"),
        directory = '&lt;%= directories.reports %&gt;/pdepend/' + now,
        mkdir = 'mkdir -p ' + directory,
        summary = directory + '/summary.xml',
        chart = directory + '/chart.svg',
        pyramid = directory + '/pyramid.svg',
        pdepend;

        pdepend = 'php &lt;%= directories.composerBin %&gt;/pdepend '
        pdepend += '--summary-xml=' + summary + ' ';
        pdepend += '--jdepend-chart=' + chart + ' ';
        pdepend += '--overview-pyramid=' + pyramid + ' ';
        pdepend += '&lt;%= directories.php %&gt;';

        return mkdir + ' &amp;&amp; ' + pdepend;
    }
}
</code></pre>

<p>This shows another part of the flexibility of the shell task, though this particular one isn't very flexible in the sense of allowing dynamic calls to it.</p>

<p>Finally, add the task <code>grunt pdepend</code> below the <code>phpmdMk</code> task:</p>

<pre><code>grunt.registerTask('pdepend', [
    'shell:pdepend'
]);
</code></pre>

<h2>Final thoughts</h2>

<p>Hopefully you've picked up some new tricks here. There were a couple of more tasks I was interested in trying to get to work,
but they weren't cooperating with me. Maybe next time, when I've reworked the ones that have been defined as grunt shell targets in this article.</p>

<p>I'd love to hear your thoughts on Twitter, and the final version of the project built here is <a href="https://github.com/Melindrea/phpqatools-grunt">located on Github</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Showing off using Grunt and the PHP Quality Assurance Toolchain to limit code smell in PHP]]></excerpt:encoded>
		<wp:post_id>1075</wp:post_id>
		<wp:post_date><![CDATA[2013-12-08 17:58:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-12-08 15:58:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-grunt-php-quality-assurance-tools]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="grunt"><![CDATA[grunt]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="pre-commit"><![CDATA[pre-commit]]></category>
		<category domain="post_tag" nicename="quality-assurance"><![CDATA[quality assurance]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[workflow]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I don&#039;t know anything about programming</title>
		<link>http://mariehogebrandt.se/articles/dont-know-anything-programming/</link>
		<pubDate>Thu, 20 Mar 2014 15:55:50 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1159</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I've been spending a lot of time on <a href="http://koding.com">Koding</a> lately. It's been called <q>Facebook for programmers</q>, because it's a combined activity feed and virtual machine that you can use for development. Outside of specific questions on how to do X in Y, how to connect using SSH and other technical questions, the most common question is the following:</p>

<blockquote>
  <p>I don't know anything about programming, where should I start?</p>
</blockquote>

<p>It's always hard to answer that question. In the end of this article I'm going to be linking to a few resources that I think are good, but the main portion is going to be about something almost as important as resources: The mindset.</p>

<h2>Why do you want to learn?</h2>

<p>This is not intended as a way to discourage you from learning, but the first question to answer is going to be <em>why</em>, because the <em>why</em> will inform the <em>how</em> and <em>what</em>. First, take your ambitions down a step. Don't think about it as <q>I want to build the next Facebook</q>, or <q>I want to build the next iTunes</q> or even <q>I want to build the next Flappy Birds (or whatever's cool in app games right now)</q>, think of it in smaller terms:</p>

<dl>
    <dt>Facebook</dt>
    <dd>Web programming/developing</dd>

    <dt>iTunes</dt>
    <dd>Most likely installable software</dd>

    <dt>Flappy Birds</dt>
    <dd>Android or iPhone programming</dd>
</dl>

<h2>What</h2>

<p>Having an idea on the scope of the why, you can consider the what, as I stated above. The lines between web development and "other" development is getting fairly blurred, where one of the key differences lies in what languages you need to focus on.</p>

<p>If you're wanting to do software like Microsoft Office, or Photoshop, or iTunes, you're going to need to work very close to individual operating systems. You'll need to have more understanding of the architectural structure of a computer than the other two. Recommended languages: Python, C++, Ruby, Java, C#.</p>

<p>If you're wanting to do apps (disclaimer, not my forte), it's both easier and harder than writing software. You will know the operating system, but it's going to be different bases depending on if you're supporting iPhones, Androids, or both. Recommended languages: Objective-C (iPhone), Java (Android).</p>

<h3>Web development</h3>

<p>Finally, web development. You're not going to need to worry too much about the hardware of client's computers (though performance is still an issue), but you are going to need to worry about cross-browser compatibility. As a quick but important note before I continue: <strong>a site does not need to look identical in all browsers</strong>. It should be functional, but it does not need to look identical. Web development is also very multifunctional, in the sense that you'll most likely need to learn several languages depending on where in the stack you are. You can read <a href="/articles/terminology#architecture">this article</a> for a deeper discussion of the concepts I'm introducing here.</p>

<p>Now, a quick disclaimer: If your thoughts on this is closer to "but ... I just want to get a page up and running immediately!", you're best off going with WordPress, either hosted on <a href="http://www.wordpress.com">WordPress.com</a> or using a web hotel of your choice to host it from <a href="http://www.wordpress.org">WordPress.org</a>. To build themes/plugins for WordPress, you'll need the Front-end information from below and PHP as a server-side language. This is not to dismiss people who wants a quick page up, but rather that if you want something up and running quick, it is better to use something that works (ish) rather than trying to figure out how to build it yourself.</p>

<h4>Front-end</h4>

<p>To build what is visible to users, you'll need (at a minimum) HTML (HyperText Markup Language) and CSS (Cascading Style Sheets). HTML describes/marks up what individual elements <em>are</em> (this is a link that goes here, that's a header, this is a list), CSS gives directions on how the page should be <em>displayed</em> (links should be blue, headers should be bold Georgia, lists should use a square bullet point). If you're also wanting it to do things, you need to use JavaScript (if you focus on this link it shows a tooltip, if you activate on this header it displays that paragraph, if you activate this list item it shows a sublist). However, all of these things are <em>hardcoded</em> into the system (in some way) if you don't communicate with a server.</p>

<h4>Backend</h4>

<p>Note: In my article above I refer to this as Middleware, but in this I will use the more commonly used term Backend to describe both of them.</p>

<p>Backend/server is where data is transformed into a front-end. Even if you aren't going to touch the front-end, you need to have a working knowledge of HTML and CSS, or at least CSS selectors. This is because either you will work with someone who gives you a mockup in HTML/CSS that your code needs to produce, or you will need to come up with at least part of what is being produced.</p>

<blockquote>
  <p>You always need to have a working knowledge of HTML, CSS and best practices, no matter if you want to do backend or front-end development.</p>
</blockquote>

<p>For backend programming, what language(s) you focus on is dependant on a lot of things. If you're needing to rely on shared hosting (most commonly if you're on a tighter budget), the language you are most likely to find supported is PHP. If you're just working for yourself and want marketable skills, probably PHP, Python (with Django), NodeJS or Ruby (on Rails). Personally I recommend against C# or Java for server-side languages for webpages.</p>

<p>To host things other than PHP (though PHP can be hosted through it as well -- all things but pure HTML-pages can), I recommend <a href="http://heroku.com">Heroku</a>. If you're just experimenting but need a development server where you can see progress, I strongly recommend <a href="http://koding.com">Koding</a>.</p>

<h2>Finally, the how</h2>

<p>So, now you're hopefully having an idea on what you're wanting to learn. To recap:</p>

<h3>If you want to build ...</h3>

<ul>
<li>software that's on the actual computer: learn Python, C++, Ruby, Java or C#</li>
<li>apps for smartphones/tablets: learn Objective-C (iPhone) and/or Java (Android)</li>
<li>web sites/applications: learn HTML &amp; CSS; JavaScript; PHP, Python (with Django), NodeJS or Ruby (on Rails)</li>
<li>nothing in particular right now, just want to learn: learn Python or NodeJS</li>
</ul>

<h3>Final thoughts on how</h3>

<p>Find yourself a project. It doesn't need to be a large one (in fact, in the beginning, it's better to go small), but it needs to solve a <em>problem</em>. Problems can be anything from "I can't remember who borrowed my DVDs", to "I'd love to connect to Google Calendars API to have reminders in the morning". I say that it needs to solve a problem because that makes it personal and motivational. In the beginning, keep a bit of an eye on best practices, code styles, etc, but more than anything: Learn to think.</p>

<h3>Resources</h3>

<h4><a href="http://www.codecademy.com/">CodeAcademy</a></h4>

<p>You can learn ...</p>

<ul>
<li>Python</li>
<li>HTML/CSS</li>
<li>PHP</li>
<li>JavaScript</li>
<li>Ruby</li>
<li>how to use APIs</li>
</ul>

<h4><a href="http://hub.tutsplus.com/">TutsPlus</a></h4>

<p>Has articles and screencasts in quite a few different areas, both premium and free.</p>

<p>It's a good idea to keep an eye on when it was posted and if there's comments, since occasionally the information gets changed, since they often report on very new things.</p>

<h4><a href="http://pythonturtle.org/">PythonTurtle</a></h4>

<p>An adorable way to learn Python. It is an interactive tutorial that's easy enough for children to use, and advanced enough that you don't feel like a child using it.</p>

<h4><a href="http://railsgirls.com/materials">Rails Girls Tutorials</a></h4>

<p>Created to be a good way to learn Ruby on Rails in workshops, there's quite a lot of nice material to absorb. The <a href="http://guides.railsgirls.com/app/">Rails Girls App</a> is a good place to start.</p>

<h4><a href="https://help.github.com/articles/set-up-git">Getting started with Github</a></h4>

<p>I did not touch on Git or Github in the article, but I want to add it here. Git is a way to version control your code, which gives you a bigger freedom to play around with it without needing to worry as much about losing work. Github is a place to host the code, and quite a few open source projects are on Github.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1159</wp:post_id>
		<wp:post_date><![CDATA[2014-03-20 17:55:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-20 15:55:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dont-know-anything-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[A beginner's primer]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I need help! Something&#039;s gone wrong!</title>
		<link>http://mariehogebrandt.se/articles/need-help-somethings-gone-wrong/</link>
		<pubDate>Fri, 28 Mar 2014 08:07:16 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1162</guid>
		<description></description>
		<content:encoded><![CDATA[<p>First, <strong>don't panic</strong>. Everything's going to feel better after a relaxing cup of tea.</p>

<p>Second, let's figure out the problem.</p>

<h2>I'm on Koding and I got X error/Y happened</h2>

<p>This is likely either a temporary hiccup or an actual bug. If you haven't gotten that cup of tea yet, do so.</p>

<p>Welcome back! Is the issue still there? If so, write up a status update with it. Describe what happened, where it happened and what you expected to happen. The last bit can be skipped in cases where what you expected is obvious, ex "As I opened the terminal it started playing Beethoven's 5th Symphony". You probably expected the terminal to open.</p>

<h2>I'm working in the terminal and a command gave me an error message</h2>

<p>Start by reading the error message. There's probably something in there making sense. For instance any case of <code>permission denied</code> is always going to be a username/password error. If it's trying to connect to MySQL, then you're using the wrong username and/or password. If it's running other commands, it might be that you need to be superuser to use them. Examples of superuser commands.</p>

<ul>
<li>`apt-get <anything></li>
<li><code>mkdir &lt;path not under /home/yourname/&gt;</code></li>
<li><code>service apache2/nginx/mysql/etc restart/start/reload/stop</code></li>
</ul>

<p>It doesn't make any sense to you? Google it. Remove any specifics to your system (ex filenames or directories) and Google it. Most errors have occured for someone else, so most errors have a solution somewhere on the net.</p>

<p>Still not finding anything?</p>

<p><a href="#post-questions">Go here to find final ways</a></p>

<h2>This is an error when I run my code</h2>

<p>The first steps are similar to the terminal above:</p>

<ul>
<li>Make sure it's reproducable (IE it happens when you run it two more times)</li>
<li>Try to make sense of what it's saying. If it's a language that uses semicolons to break up things, any "unexpected X" is likely due to a missing semicolon higher up in the code</li>
<li>Google the error message, removing any specifics like line number and file</li>
</ul>

<p>Still not finding anything?</p>

<p><a href="#post-questions">Go here to find final ways</a></p>

<h2 id="post-questions">How to post a question that can get answered</h2>

<p>Find a trusty site to post your question on. This might be one of the <a href="http://stackoverflow.com/">StackOverflow network</a>, forums for your specific language/operating system/program, or perhaps <a href="http://koding.com">Koding.com</a>.</p>

<p>Write down:</p>

<ul>
<li>Context of what you're trying to accomplish. This includes language and specific programs</li>
<li>What you've tried so far?</li>
<li>What errors did you run into? Be specific</li>
</ul>

<p>This will make it a lot likelier that you'll get good answers, because now the first thing people ask won't be "what happened?" or "what did you try so far?" This means less of a waste of both of your times.</p>

<p>If your question is trying to figure out where to start, and you feel you lack the skills needed to find the right search terms (which happens), you can still post the context with language, what you're trying to accomplish and specific programs. Once again, that will waste less time overall.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1162</wp:post_id>
		<wp:post_date><![CDATA[2014-03-28 10:07:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-28 08:07:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[need-help-somethings-gone-wrong]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="errors"><![CDATA[errors]]></category>
		<category domain="post_tag" nicename="koding"><![CDATA[Koding]]></category>
		<category domain="post_tag" nicename="terminal"><![CDATA[terminal]]></category>
		<category domain="category" nicename="tips"><![CDATA[Tips]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Revision control for writers</title>
		<link>http://mariehogebrandt.se/articles/revision-control-writers/</link>
		<pubDate>Mon, 28 Jul 2014 09:38:28 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1210</guid>
		<description></description>
		<content:encoded><![CDATA[<p>We all know about the more common ways of dealing with backup/revisions. It's along these lines:</p>

<ol>
<li>Copy file</li>
<li>Paste file</li>
<li>Rename file with a date</li>
<li>Copy folder with all the revisions to a spare harddrive/etc</li>
</ol>

<p>Now, I'm fairly techsavy (which is probably evident by the rest of the articles), but since revisions are such a large part of writing, I hope that I will be able to explain in an accessible way how to use revision <em>control</em>.</p>

<p>If there is something in particular that is making you stumble, feel free to contact me <a href="/contact">through mail</a> or <a href="https://twitter.com/melindrea82">through Twitter</a>. As a note, I mainly work in Linux, so my Windows skills are lacking, but I can at least help to troubleshoot.</p>

<p>If you prefer to have a more visual interface, <a href="http://git-scm.com/downloads/guis">here's a good list</a>. However, the article will assume you are using the terminal.</p>

<p>Any <code>lines looking like this</code> means that it should be copied and pasted into the terminal of your chosen operating system. Windows Git-installation comes with its own terminal, link below under installation. To simplify the text, it will look something like this "run <code>some command</code>", which is shorthand for:</p>

<ol>
<li>Copy the line</li>
<li>Paste the line in the terminal, at the root of your working folder/directory</li>
<li>Press <kbd>Enter</kbd></li>
</ol>

<h2>Installation</h2>

<p>There are several different kinds of revision control systems. To simplify, this will focus on the one I use the most, <a href="http://git-scm.com/">Git</a>.</p>

<p>Install it on ...</p>

<ul>
<li><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git#Installing-on-Windows">Windows</a></li>
<li><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git#Installing-on-Mac">Mac</a></li>
<li><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git#Installing-on-Linux">Linux</a></li>
</ul>

<h2>First steps of revision control</h2>

<h3>Getting started with Git</h3>

<p>First thing you'll need to do is to let Git know who you are. You can configurate git using the command <code>git config</code>, but the two specifics needed here are name and e-mail.</p>

<ol>
<li>Run <code>git config --global user.name "YOUR NAME"</code></li>
<li>Run <code>git config --global user.email "YOUR E-MAIL ADDRESS"</code></li>
</ol>

<h3>Setting up the vault for your novel</h3>

<p>The word you will hear is <em>repository</em>. I went with the synonym vault as more recognizable. First, a metaphor for what we're going to do:</p>

<p>Imagine that you have an assistant that keeps track of every change you do to your novel. They don't actually have the novel itself, but should you lose your copy, they have the information to recreate it <em>as long as you have given it to them</em>. That is the vault / bare repository we will set up. In fact, you can have several of these assistants, if you are of the more paranoid persuasion. If you are, suggestions on where to store things will be detailed further down.</p>

<ol>
<li>Decide where you want to store the backup / vault / assistant and create a folder for it. A recommendation is to name it ending with <code>.git</code>, ex. <code>mynovel.git</code>. Make note of where this is, you will need it</li>
<li>In the terminal, go to the folder. If you're using Windows you can right-click when you are in the right folder and select <code>Git Bash</code> option</li>
<li>Run <code>git --bare init</code> to create the repository</li>
</ol>

<h3>Dublicate (clone) the repository</h3>

<p>Now into where you're actually writing.</p>

<ol>
<li>Create the folder that you want to work in</li>
<li>Go to the folder itself, as per step 2 above</li>
<li>Run <code>git clone file:///path/to/repo.git</code></li>
</ol>

<p>At this point you have one backup repository and one working repository.</p>

<h3>Start writing</h3>

<p>As a note here before we continue with the different commands, the revision control works for any kind of documents. However, if you really want to get the best mileage out of it, you should avoid the latest versions of Word. This is because of how it internally deals with your file, but it's not a big thing. However, if you needed the push to move away from writing in Word, here it is!</p>

<h4>Saving (committing) changes</h4>

<p>While writing, you should save as normal. However, when you are at a good point to check things in (what those points are is up to you), go into the terminal and the folder you have the project in. Run <code>git status -sb</code>.</p>

<p>It will show you something like the following:</p>

<pre><code>## master
 M README.md
 D LICENCE-MIT
A  fluff
?? fluff2
UU fluff3
</code></pre>

<p>The first (## test) is the headline. It states with branch (later) you're on.</p>

<dl>
    <dt>Space before symbol</dt>
    <dd>The file is not marked (staged) to be saved</dd>
    <dt>M before filename</dt>
    <dd>The file has been changed since you last saved</dd>
    <dt>D before filename</dt>
    <dd>The file has been deleted since you last saved</dd>
    <dt>A before filename</dt>
    <dd>The file has been added and is staged to be saved</dd>
    <dt>?? before filename</dt>
    <dd>The file has been added, but is not staged to be saved</dd>
    <dt>UU before filename</dt>
    <dd>There are "conflicts" in the file (unlikely to show up in the first few steps)</dd>
</dl>

<ol>
<li>To mark all files (even the deleted ones) as to-be-saved, run <code>git add . --all</code> in the folder where everything is saved</li>
<li>Run <code>git commit -m "Something to remind you what you changed"</code>, which will do the actual save</li>
<li>Finally, run <code>git push origin master</code>. This reports the changes to the bare repository we created above</li>
</ol>

<h3>My computer crashed, and now I need to recover the backup!</h3>

<ol>
<li>Create the folder that you want to work in</li>
<li>In the terminal, go to the folder</li>
<li>Run <code>git clone file:///path/to/repo.git</code></li>
</ol>

<p>Yes, those are the same steps as above. I repeated them here for ease of use.</p>

<h3>Summary of the first steps</h3>

<p>This is a very simplistic flow. You can do far more advanced things, but if you just want to have an easy way to backup and have some kind of check on what a scene looked like three days ago, this will do the trick. If you want to wet your appetite a bit more, continue on.</p>

<h2>Digging deeper into the rabbit hole</h2>

<h3>Branches</h3>

<p>You may want to experiment a bit with a text. Using the old way you'd be copying the manuscript file and work on that. A similar way to that is to create a <em>branch</em> off of the main manuscript tree. This branch can be treated in whichever way you want. If you completelly mess things up, you can just discard it and go back to your default / untouched Master branch. Branch names should be single words, or maybe underline-separated words, such as <code>my_branch</code>.</p>

<h4>Commands</h4>

<dl>
    <dt>Create a new branch as you move to (checkout) it</dt>
    <dd>Run `git checkout -b "name of branch"`</dd>
    <dt>Move to a branch</dt>
    <dd>Run `git checkout "name of branch"`</dd>
    <dt>Create a new branch without moving to it</dt>
    <dd>Run `git branch "name of branch"`</dd>
    <dt>Merge two branches</dt>
    <dd>Run `git merge "name of branch"`</dd>
</dl>

<h4>Examples</h4>

<p>Assume that you're wanting to edit chapter 1. The flow will go about like this, assuming you name the branch <code>chapter1_edit</code>:</p>

<ol>
<li>Run <code>git checkout -b chapter1_edit</code>. Run <code>git status -sb</code> to confirm that the heading has the name <code>chapter1_edit</code>.</li>
<li>Do changes. Add (<code>git add --all</code>) and commit (<code>git commit -m "my changes"</code>) them. Repeat until done.</li>
<li>Run <code>git checkout master</code> to get back to the master branch. If you have changes that are not committed, they will follow along to the branch, and if those changes clash with the current state, you cannot change branch. That's why you're recommended to always commit your changes, even if you decide that you don't like them and will not keep them.</li>
<li>If you want to keep the changes run <code>git merge &lt;name of branch&gt;</code>. You may get a <em>merge conflict</em>, at which point you are best off googling "resolving conflict in git". (It's not that difficult, but this is a brief runthrough.)</li>
</ol>

<p>To delete a branch, run <code>git branch -d &lt;name of branch&gt;</code>. If it is a branch that hasn't been merged into the branch you are at (maybe you decided to not keep those edits), the command is <code>git branch -D &lt;name of branch&gt;</code>, that is a capital D rather than lowercase.</p>

<h3>Finding prior versions</h3>

<p>The earlier examples have been dealing with Git as (more or less) a backup tool. However, the point of a revision control system is to be able to find a prior version.</p>

<h4>View change log</h4>

<p>Let's start with the easiest: Run <code>git log</code>. This will give you a list of commits, along these lines:</p>

<pre><code>commit d24ef819ff969c27c5b25d75e1d9059b7129564d
Author: Marie Hogebrandt &lt;iam@mariehogebrandt.se&gt;
Date:   Mon Jun 16 08:57:17 2014 +0200

    Removed all filter words
</code></pre>

<p>The first row (<code>commit d24ef819ff969c27c5b25d75e1d9059b7129564d</code>) is known as the <em>commit hash</em> and is used to reference this particular commit. You can shorten it to about 7 characters for simplicity, so in this exact case <code>d24ef81</code>.</p>

<p>Everything below the <code>Date:</code> line is the commit message. It's whatever you wrote after <code>-m</code> when you saved it. If you need more than just a single line, you don't actually need to use the format <code>git commit -m "message"</code>, but can use <code>git commit</code> at which point it will open up an editor in the terminal. I will write a brief explanation on Vim (which I understand is the Windows one it opens) further down.</p>

<p>Use the arrow keys to navigate the log, and once you're done, press <code>q</code>.</p>

<p>To just see a quick list of changes, run <code>git log --oneline</code>, which will give you the commit hash and message.</p>

<h4>View differences between two commits</h4>

<p>So, you want to see the difference between two points in time. Let's say that in <code>chapter2.rtf</code> you removed the bartender, but now you need to use her in chapter 5, and you don't remember what you named her, or what that important scar looks like, and thus you want to read the original one.</p>

<p>Definition: HEAD (note: capital letters). HEAD is the point you are at after every save point. It's the unique commit hash (to use that term) for <strong>this is where I am</strong>. If you're wanting to compare HEAD to one or two commits back, the easiest is to use the <code>^</code> operator.</p>

<p>Assume we have three commits. The current place, the last time you committed, and the two times before that. To reference them without knowing the commit hash, it's as follows:</p>

<dl>
    <dt>Current place</dt>
    <dd>`HEAD`</dd>
    <dt>Commit prior to where you are now</dt>
    <dd>`HEAD^`</dd>
    <dt>Two commits prior to where you are now</dt>
    <dd>`HEAD^^`</dd>
    <dt>Three commits prior to where you are now</dt>
    <dd>`HEAD^^^`</dd>
</dl>

<p>However, if you are looking at more diverse commits (say the HEAD^^^ and the one three commits before that), you're better off using <code>git log</code> to figure out the commit hash.</p>

<p>To see the difference between two commits on a specific file (in this case HEAD, HEAD^^, and on chapter2.rtf) run <code>git diff HEAD^^ HEAD chapter2.rtf</code>. That is, more generalised:</p>

<ol>
<li>Pick the earliest point. That's the first argument</li>
<li>Pick the end-point. That's the second argument</li>
<li>Pick the file you want to look at. If you want to see all differences, you can leave off the third argument</li>
<li>Run it: <code>git diff &lt;earliest&gt; &lt;latest&gt; &lt;path/to/file&gt;</code></li>
</ol>

<h4>Pick up an earlier revision</h4>

<p>Depending exactly what you're wanting to do, you can go about this in a few different ways. In all of these cases, we'll assume that the cat managed to get into your document and delete most of it.</p>

<h5>Unstage</h5>

<p>You accidentally marked the file your kitty created as <em>to be saved</em>, which you don't want. Run <code>git reset HEAD &lt;file/kitty/created&gt;</code>, and the file is back to being unmarked for saving.</p>

<h5>Go back to the latest commit</h5>

<p>You saved the document, but you haven't committed it yet, so what you want is to undo all the changes to it. Run <code>git checkout -- &lt;file/kitty/changed&gt;</code>, which will fetch the latest committed version of that file.</p>

<h4>Whoops, I accidentally commited it!</h4>

<p>Now the versatility of the <code>git checkout</code> command is going to come into play. That's the one we use to change branches, and now they can be used on specific files as well?</p>

<p>Yes. You can even use it to check out specific commits, but let's not get ahead of ourselves.</p>

<dl>
    <dt>`git checkout <branchname>`</dt>
    <dd>Moves you to that specific branch</dd>
    <dt>`git checkout -b <branchname>`</dt>
    <dd>Creates the branch and then moves you to it</dd>
    <dt>`git checkout -- <filename>`</dt>
    <dd>Replaces the current changes in *filename* with the content of the file in the latest save</dd>
    <dt>`git checkout <branchname/commit hash> <filename>`</dt>
    <dd>Replaces the current changes in *filename* with the content of the file in the specified branch or commit hash. For instance: `git checkout master chapter2.rtf` will fetch the content of the file as it is in the master-branch. Similarly `git checkout df531a9 chapter2.rtf` will fetch it as it was in the commit `df531a9`</dd>
</dl>

<h4>Everything I worked on needs to be reset to my latest save!</h4>

<p>The path <code>.</code> is "here and subfolders", so you can run <code>git checkout -- .</code> to undo all the changes since the latest commit. This actually also works with a prior commit, but you <strong>may lose everything</strong>, see below for details.</p>

<h3>I want to explore an entirely different revision of this</h3>

<ol>
<li>Commit any changes you want to keep in the current branch, or you <strong>risk losing them</strong></li>
<li>Figure out which commit you want to go to (ex df531a9)</li>
<li>Do you want to check this out in the current branch or in another/new branch?</li>
</ol>

<h4>Current branch</h4>

<ol>
<li>To check it out in the current branch (maybe you want to get some quick info and can't remember where it was), run <code>git checkout &lt;commit hash&gt;</code>. The <code>detached HEAD</code> business means that nothing you do there will effect things</li>
<li>To get back to the branch you were in, run <code>git checkout &lt;name of branch&gt;</code></li>
</ol>

<h4>New branch</h4>

<ol>
<li>To check out a new branch from a commit, run <code>git checkout &lt;commit hash&gt; -b &lt;new branch&gt;</code></li>
<li>Since this is a new branch, it acts in all ways as the branches mentioned above</li>
</ol>

<h2>More than one backup</h2>

<p>Us writers are occasionally careful on the verge of paranoid when it comes to our work, so let's look at how to add more points of backup.</p>

<h3>Add more vaults!</h3>

<ol>
<li>Using the guide from above, create a new bare repository</li>
<li>Decide on a memorable name. For instance, <em>usb</em> or <em>2nd</em>. Avoid using spaces in the name</li>
<li>Add this using the following command: <code>git remote add &lt;name of vault&gt; &lt;path to vault&gt;</code></li>
<li>Run <code>git push -u &lt;name of vault&gt; master</code></li>
<li>Whenever you update the prior vault with <code>git push</code>, also run <code>git push &lt;name of vault&gt;</code></li>
</ol>

<h3>Use some kind of cloud vault</h3>

<p>There are two major cloud services for hosting repositories. <a href="https://bitbucket.org/">Bitbucket</a> allows for free private repositories, and <a href="https://github.com/">Github</a> which you need to pay for any private repositories.</p>

<p>I personally like Github and have no issues with the $7/month that it costs me to have up-to 5 private repositories, however that's at least partly habit rather than a choice against Bitbucket. Both of them have good tutorials (and a fairly easily-to-understand interface) for how to create an empty repository, and also for how to import an existing repository.</p>

<h3>E-mail entire repository</h3>

<p>Yes, you can e-mail the repository, or e-mail only certain changes. It uses a command called <code>git bundle</code></p>

<h4>The entire repository</h4>

<ol>
<li>Decide which branches you want. If you want all of them, the third argument is <code>--all</code>, if only one or more, they should be specified like this: <code>master edit test</code></li>
<li>Pick the path where you want to put the bundle, ex <code>../mynovel.bundle</code>, which will put it one step above the root. You don't need to name it <code>.bundle</code>, but it's a good idea</li>
<li>Run <code>git bundle create &lt;name of bundle&gt; &lt;branch(es)&gt;</code></li>
<li>E-mail the file to wherever you want it</li>
<li>You can now clone from it, ex <code>git clone &lt;name of bundle&gt; -b master &lt;name of repo&gt;</code> or if you just want to update from the bundle, run <code>git pull &lt;name of bundle&gt;</code></li>
</ol>

<h4>Updates</h4>

<p>You decide you don't actually want to e-mail the entire repository each time, but rather e-mailed the complete once, and now you just want the updates.</p>

<p>Run <code>git log --oneline</code> to see which commits you have. As an example, view the following log:</p>

<pre><code>71b84da last commit - second repo
c99cf5b fourth commit - second repo
7011d3d third commit - second repo
9a466c5 second commit
b1ec324 first commit
</code></pre>

<p>In this example, you want to bundle everything newer than <code>second commit</code>.</p>

<ol>
<li>The hash you're wanting is the one of the commit right before the first one you want to bundle, so in the example <code>9a466c5</code>. You could also go with just adding the commits that are associated with a specific branch, say <code>edit</code></li>
<li><code>git bundle create &lt;name of bundle&gt; master ^&lt;hash or branch name&gt;</code></li>
<li>E-mail it</li>
<li>Check that the bundle is valid for the repository you are trying to apply it to by running <code>bundle verify &lt;name of bundle</code>. It will object if either you are missing one of the ancestor commits, or there's something else wrong with it</li>
<li>To update your backup repository, run <code>git pull &lt;path to bundle&gt;</code></li>
</ol>

<h3>But I already have most of my novel in a particular folder, how does that work?</h3>

<ol>
<li>Follow the steps to create the bare repository as above</li>
<li>Go to your novel's folder and run the following commands:

<ol>
<li><code>git init</code></li>
<li><code>git add .</code></li>
<li><code>git commit -m "Initial commit"</code></li>
<li><code>git remote add origin file:///path/to/repo.git</code></li>
<li><code>git push -u origin master</code></li>
</ol></li>
</ol>

<p>You probably recognize <code>git remote add ...</code> from how to add more vaults. You don't need to name the vault <em>origin</em>, but it's the standard name that git gives that position when you clone it.</p>

<p>You also probably recognize <code>git push ...</code>, so let's see what these arguments do, in specific.</p>

<dl>
    <dt>`-u`</dt>
    <dd>This sets up a tracking relationship. It allows you to run `git push <remote name>` to update that particular vault or `git pull <remote name>` to update from it</dd>
    <dt>`origin`</dt>
    <dd>The name of the vault</dd>
    <dt>`master`</dt>
    <dd>The name of the branch, which must match between repositories.</dd>
</dl>

<p>Notes: <em>master</em> and <em>origin</em> are both default, which is why these commands are equivalent:</p>

<p><code>git push</code>, <code>git push origin</code>, <code>git push origin master</code>.</p>

<p>However, if you are using a different name for the remote, you need to detail that, so the remote <code>usb</code> can only be pushed to using <code>git push usb</code> or <code>git push usb master</code>.</p>

<p>You can also track other branches than master, but this will not go into that.</p>

<h2>Finishing thoughts</h2>

<p>This is a work in progress. If you run into a hurdle, don't hesitate to contact me via <a href="/contact">my contact form</a> or <a href="http://www.twitter.com/melindrea82">my twitter</a>. Obviously also if you have ideas on what else you'd like to do as a writer using revision control, or just want to chat!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1210</wp:post_id>
		<wp:post_date><![CDATA[2014-07-28 11:38:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-28 09:38:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[revision-control-writers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git-2"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="revision-control"><![CDATA[revision control]]></category>
		<category domain="post_tag" nicename="version-control"><![CDATA[version control]]></category>
		<category domain="post_tag" nicename="writer"><![CDATA[writer]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[The overlap between programming and writing]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ramblings</title>
		<link>http://mariehogebrandt.se/articles/ramblings/</link>
		<pubDate>Tue, 19 Aug 2014 05:09:58 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1215</guid>
		<description></description>
		<content:encoded><![CDATA[<p>"Mom, I never smile."</p>

<p>A nine-year-old me had already recognized one of the key differences between myself and my peers. It would, however, be another twelve years before my depression was diagnosed. We didn't talk about mental issues.</p>

<p>Not, I think, because it was seen as something to be ashamed of, but it did not even occur to anyone that maybe something was wrong with me that could be fixed. In hindsight, I'm wondering why the therapist I saw (after being molested by a hitchhiker) never realised things. Maybe it just wasn't as bad then. Or maybe a child that uses the term "sexual attraction" (as in, being worried that what he did to me would stop me from having normal ones) couldn't have that kind of issues.</p>

<p>I was over twenty when I for the first time woke up without feeling as if a huge weight lay on my chest. This was after I left university because I could not deal with things anymore, after I and my boyfriend had broken up. I don't think that the end of the relationship caused my issues (I was already on medication for my depression, anxiety, panic attacks and mood swings) but it certainly didn't help.</p>

<p>I can't even tell you how long that period lasted. I remember only shattered bits and pieces of a darkness that almost consumed me. I lay awake, wanting to be purified. For the darkness inside to be drained. I imagined the knife slicing into my stomach, washing away all the hurt. Once or twice I even slammed a fist into my stomach, almost as from reflex.</p>

<p>And now? I'm better. Depression doesn't take me in the way it used to, because I'm wise to its tricks. At least, that's what I tell myself. Maybe I'm just used to it?</p>

<hr />

<p>It was the second year of university that I first sought out a doctor. She had this laundry list of questions, and I joked with her occasionally as I answered them.</p>

<p>"Do you feel anxious?"</p>

<p>"No, not more than reasonable."</p>

<p>What did I feel anxious about? Well, normal stuff. School. Grades. My relationship. Friends. What my parents would think. Disappointing my family ... As the list became longer and longer, her eyes widened, and it slowly dawned on me that no, this wasn't reasonable.</p>

<p>This I also cope with now. When I get worrried, I mentally check myself to ensure that I'm not having a disproportionate response. Most of the time, I really have nothing to be worried about, so I ignore the feelings of dread. I know not everyone can, so it's important to know that every person is individual. What might be easy for me might break someone else, and vice versa.</p>

<hr />

<p>Breathe out. Breathe in. I always speak fast, but when the panic strikes (at least the "up" kind) I speak faster. I think faster. I can't focus on a single thing, while having a burst of energy that could last me throughout the year. If I could just harness that ... but of course I can't. What triggered it? Stress, maybe. Or something else. My panic attacks aren't necessarily brought on by any particular trigger (at least not ones I've been able to map), but they're there.</p>

<p>When it's "down" I just want to sleep. Hurt myself. Bleed myself on the wickedness inside.</p>

<p>Thankfully all of my attacks the last three or so years have been the "up" kind.</p>

<hr />

<p>"Boys will be boys."</p>

<p>"He just likes you."</p>

<p>"You need to be the more mature person."</p>

<p>"If you just stop letting them get to you, they'll stop."</p>

<p>Before you say that to a child, before you lay the burden of them being bullied on their shoulders, <strong><em>think</em></strong>. Yes, I cry at the drop of a hat. But just because I easily have the waterworks turned on doesn't mean that I deserve it. Why don't you just stop breathing, or walking, or that habit you have of tapping the desk when you're thinking? Exactly. You can't, because it's second nature to you.</p>

<p>Consider, next time, that being sensitive and empathic is a good thing. You're fostering narcissists and me-first-ists by telling children that caring is a bad thing.</p>

<p>I always cared. I still do. I'm the shoulder to cry on, without (for most of my life) a shoulder I can cry on.</p>

<p>Healer, heal thyself.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1215</wp:post_id>
		<wp:post_date><![CDATA[2014-08-19 07:09:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-19 05:09:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ramblings]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="anxiety"><![CDATA[anxiety]]></category>
		<category domain="post_tag" nicename="depression"><![CDATA[depression]]></category>
		<category domain="category" nicename="generic"><![CDATA[Generic]]></category>
		<category domain="post_tag" nicename="mental-health"><![CDATA[mental health]]></category>
		<category domain="post_tag" nicename="panic-attacks"><![CDATA[panic attacks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[My mind on occasion]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Self-Editing</title>
		<link>http://mariehogebrandt.se/articles/self-editing/</link>
		<pubDate>Mon, 08 Sep 2014 16:07:13 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1219</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Strands of consciousness</h2>

<p>Just because the first draft is written does not mean that a writer's work is done. That was not a lesson I savoured, in fact my very first "final novel" is still in that editing stage as I fumble my way around it. You see, I write the first draft in a methodical way and generally sparse way. I barely touch the surface of the character's thoughts and motivations, which leaves me in the situation of rarely needing to cut down words (outside style) but rather add more. So, how is my process at this point?</p>

<p>The key thing is that I focus--more or less--on a single thing in each read-through. I know others have a nicely sectioned story where they need to go into something closer to line-edit immediately, but I don't. Their approach is as valid for them, obviously, as writing is personal in a way that's hard to fathom for those who don't do, I think.</p>

<p>I won't mention again how to do these read-throughs. I personally like to print it out and work on paper rather than the screen, but do whatever you're comfortable with.</p>

<p>A caveat: Any grammar/style/passive voice/etc edits, apply mainly to the narrative. Dialogue follows its own rules. It doesn't need to be grammatically correct, it doesn't need to be coherent. As long as <em>any changes are on purpose</em>. Feel like breaking "rules"? Knock yourself out! Just do it in purpose. Have a reason for every rule you are breaking. You are the boss of your writing, and your style, and you owe it to yourself and your readers to make the best of it.</p>

<p>Also? These strands of editing are in no way a replacement for beta readers or paid editors. These are to help the editors to make the best of your manuscript without needing to wallow through a drudge of things you can fix on your own.</p>

<h2>First read-through</h2>

<p>The first thing I focus on--after a time of rest of at least a week or two--is to read it as if it was written by a stranger. I don't hate my work (generally), so I won't suggest reading it as if your worst enemy wrote it, but I do suggest that you need to read it as if you've never read it before. This will give you the base to see where you're starting the story too early or too late, and where information is missing.</p>

<p>If you are a pantser, I believe you will get some mileage out of mapping your novel against <a href="http://www.helpingwritersbecomeauthors.com/">K.M. Weiland's</a> article <a href="http://www.livehacked.com/writing/learn-structure-novel-five-minutes/">Learn How To Structure Your Novel--In 5 Minutes</a>. I generally use it set up the skeleton of plot/etc, and then check back once the first draft is done.</p>

<p>In summary, imagine the story as three acts and three plot points, with a quarter of the novel dedicated to the First Act (ending with the First Plot Point), another quarter leading up to the Second Plot Point (midway through the Second Act), another quarter leading to the end of the Second Act and the Third Plot Point (I tend to like to think of it as the lowest point), and then the final quarter is the Third Act. Even if you don't use an "official" three-act structure, I find this useful as a mental structure.</p>

<p>At any rate, at the end of this read-through, you should have figured out what plotholes (if any) you have, if you need to rebalance sections by cutting out scenes or writing new scenes, or even new chapters. If you feel like fixing grammar and spelling as you do this, that's fine, but don't worry about sentence structure too much. Your focus should be on the story and making it coherent.</p>

<p>I tend to look for the following things:</p>

<ul>
<li>Are there scenes that needs to be added to flesh out characters/plot?</li>
<li>Are any transitions (in particularly between scenes) too abrupt?</li>
<li>Is it clear who's speaking? I'm not talking about dangling participles here, but rather too many pronouns.</li>
<li>Should any scenes be cut? Does the story start where it should?</li>
<li>Is anything obviously inconsistent? Why is her pet poodle now a dobermann?</li>
</ul>

<p>Now go on to fix the issues you found. To me, this is the fun part of editing, at least the first few strands.</p>

<h2>Character Arcs</h2>

<p>I finished my first novel (the one alluded to above, not-yet-finished-editing) in November 2013. I used Scrivener (an awesome program!), which among its features has the ability to add labels to scenes. I'd marked each scene with characters, locations, and occasionally storyline strand. I strongly recommend this, especially if you have a way to filter out the non-relevant scenes. Anyways, back to Vendela and the Småty novel (first in a series).</p>

<p>Vendela is a fairly cold, calculating, emotionally distant person who doesn't let much bother her. In the first act there's a scene where we're introduced to her ex who drunkenly accosts her and the guy (male main character Andrej) she's with. This shooks her up, leaving her needing Andrej to defend her honour. ... Wait, what? The hell did <em>that</em> come from? Yeah ... That's fixed now. Robert (the ex) is overall a good guy, and he's certainly not abusive; he never was. Accosting her while drunk? Sure. But it left her unruffled, and a touch annoyed at Andrej for trying to fight her battles.</p>

<p>So, that's what I mean about editing for character arcs. No matter if you're writing the arc from a strict formula (I recommend K.M Weiland again for posts on how to write a good character arc), or pantsing it with a vague idea on where you want them to go, this step is actually several strands.</p>

<p>In each strand, read through the relevant character's (major or minor) parts for tone and arc. Are you spreading the breadcrumbs of character history and such evenly? Are they suddenly acting out of character? Well, if they are, then either fix it to be in character, or to show why this is not out of character (or maybe to later give explanations, though if it's this one, make sure you hint at that).</p>

<p>In summary, per character:</p>

<ul>
<li>Decide the  plot points for the character</li>
<li>As above, are there inconsistencies that needs to be fixed?</li>
<li>Do you need to add/remove scenes to make parts of the arc more obvious?</li>
</ul>

<h2>Cut out filter words</h2>

<p>You know the words. The myriad of "Just" and "So" that plagues your narrative. All the <em>really</em>, <em>totally</em>, etc. If you don't know exactly which words you have issues with, I recommend finding good books/blog posts on it. I personally use Rayne Hall's <a href="http://www.amazon.com/Word-Loss-Diet-Writers-Craft-Book-ebook/dp/B00AWA7XEE">The Word-Loss Diet</a>.</p>

<p>I put this before the next section because it's an easy way to see the style cleaned up, and assuming you follow a system it's fast as well.</p>

<h2>Evaluate the usefulness of the scenes</h2>

<p>This one's hard for me. I always end up either cutting too much, or too little, because I'm eagerly trying to 'kill my darlings'. When I read <q>every scene should fulfill a purpose for the plot</q> I forget that characters are the most important part of the plot. Even a scene where they have coffee in a hotel might be useful if we find out that the main character is terrified of horses, something that only becomes relevant once the only option is to flee from Mount Doom mounted.</p>

<p>That said, do look at every scene and figure out the following:</p>

<ul>
<li>What does the main Point of View (PoV) want? (They should want <em>something</em>)</li>
<li>Does the scene add to either fleshing out the characters (and not in the "info dump" kind of way), or further the plot?</li>
</ul>

<h2>First style/grammar edit</h2>

<p>At this point, you should have the story down pat and can start looking at scene-level edits. I tend to start this off with using the ancient linux tool <code>diction</code> to get wordy/misused phrases out in the open as well as basic grammar/spelling checks, before reading it through and marking things that stand out.</p>

<p>If you take nothing else with you from this article, take this:</p>

<p><strong><em>Read your story out loud to get the melody.</em></strong> Especially if you have someone who's patient with listening and can give you pointers if something sounds off. If you're stumbling on words, mark them to be fixed in some way.</p>

<p>Since you're reading things through, you'll maybe also figure out issues in voice/whatever that were missed in prior steps. That's fine, and I'd mark those as well.</p>

<h2>Passive voice</h2>

<p>Yes, I am giving this its own heading. I like to use the Linux tool <code>style</code>, which analyzes the text for readability and sentence structure. It also has a setting similar to <code>diction</code>, allowing me to get--black-on-white--a list of sentences written in passive voice. Now, here's something important to keep in mind: You're the boss of your writing, not some fancy automatic style analyzer.</p>

<h2>Grammar/spelling</h2>

<p>Trust me, those two prior steps introduced a myriad of grammatical missteps and broke the melody completelly. Run the grammar-/spellchecker, and then read it through out loud, fixing everything the grammar/spellchecker didn't catch.</p>

<h2>The five senses and other parts of scenery</h2>

<p>How many have you used? Keep in mind that to write a rich experience, you'll want to utilize more than just sight and hearing. How does the floor feel under her feet? What does the air smell of? Can she taste anything? This may not need to be fixed in every scene, but I (personally!) would look into having at least three senses in each scene.</p>

<p>In dialogue, let the characters interact with the environment. Where are they? Let us know not by you stating that "the room was small with a table", but by the character taking three steps and then sitting down, looking out the window. Yes, this is the old "show not tell".</p>

<p>As an aside, this is actually why I struggle with first person narrative. My writing tends to be filled with <q>she pulled a hand through her oily locks</q> and <q>he slumped into the hard chair, wincing at the loud creaking</q>, which works fine in third, but makes the Point of View seem a touch too conceited in first.</p>

<h2>Point of View</h2>

<p>Since you've established what your Point of View is, now it's time to get down and gritty and figure out on a scene-level if you're headhopping too much. I'm not going to tell you howy you should organize your point of view(s), only that you should make sure the reader only gets what any given PoV should know.</p>

<h2>Words</h2>

<p>If you're like me, you've picked at the words in every read-through, but I like to have one that's specifically for finding good words. Now, don't tell me "there should not be any adverbs, because a strong verb is better than a verb + adverb!". Sure, that's true. That said, <q>he said quietly</q> might not be the same thing as</p>

<p>he whispered</p>

<p>. If he whispered, then sure, but if he just has a naturally soft voice, don't write that he whispered.</p>

<p>I have a dictionary and thesaurus at hand for this. Not to play "hunt the weird synonym", but because I love the melody of words. I may not always read out loud, but even writing this blog post I hear the words in my head. I spend far less time finding the perfect word in non-fiction, but in fiction it's important.</p>

<p>Imagine three women in a room. One is demure, the second one is coy and the third is silent. Do they look the same to your minds-eye? They don't to mine,  but those words are synonyms. I like to get the general shape of the word (let's start with shy), and then roll it and its synonyms around in my mouth, tasting the melody and examining the conjured images.</p>

<h2>Summary</h2>

<p>And that's all! I will probably do a couple of more read-throughs, tweaking here, adding there, but once I've come down to this point, I'm figuring I'll feel ready to ... hide the novel in a cupboard and never think about it again, for fear of rejection. Okay, don't do that last step, even if I will!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Strands of consciousness, or how I edit]]></excerpt:encoded>
		<wp:post_id>1219</wp:post_id>
		<wp:post_date><![CDATA[2014-09-08 18:07:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-08 16:07:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[self-editing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="editing"><![CDATA[editing]]></category>
		<category domain="post_tag" nicename="process"><![CDATA[process]]></category>
		<category domain="category" nicename="writing"><![CDATA[Writing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NaNoWriMo 2014</title>
		<link>http://mariehogebrandt.se/articles/nanowrimo-2014/</link>
		<pubDate>Sat, 25 Oct 2014 15:45:02 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1230</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Inspired by <a href="http://www.sarahkettles.com/nanowrimo-2014/">Sarah Kettle's NaNo</a>, I decided to post something as well.</p>

<p>Last year's NaNo was actually the same thing as the one I attempted 2012, but very much refocused. Since I finished the first draft, I've outlined the sequel (I'd intended to write that during Camp NaNo, but ended up not having time for it). I've also outlined another in the series, with plans for the final book as well.</p>

<p>This is going to be the "another" referenced above. It may or may not be two books (it follows two people who interact occasionally while doing their own thing), but I'm writing it as a single at the moment.</p>

<h2>A burial ground of dreams</h2>

<p>Blutwald, Vendela's stalker, left a trail of bodies. One survived, saved only because Vendela and Andrej defeated Blutwald. That one is Belinda, who now--six months after the end of her harrowing experience--flees Stockholm by boarding the first train out. Other passengers goofing around triggers a panic attack, and she leaves the train in the middle of nowhere, which is more-or-less where she stays. Meeting Vendela (again) and Sia convinced her to take her healing away from the city of painful memories. And, of course, the enigmatic Malbrecht (who comes and goes as he please) isn't making things less pleasant.</p>

<p>Not to spoil too much, but Malbrecht isn't quite straightforward with who he really is, and she's forced to travel to Hel to free him. Sia can't help, but Katja--a fashion designer-gone-Valkyria--can, so they travel together on Katja's giant raven steed. Seeing Blutwald barring the way, Belinda flees in panic, getting lost among the branches of Yggdrasil. Lose her sanity, or the man she's starting to love? Tough call.</p>

<h2>Duty calls</h2>

<p>When Katja in affect agreed to become imbued as a Valkyrie (to save her girlfriend Sia, her ex friend-with-benefits Andrej, and Vendela from a monster who'd kidnapped them) she bit off more than she could chew. Perhaps she shouldn't be surprised that the powerboost came with small print, but now she's supposed to collect dead people for Freja. As it turns out, someone's been stealing the dead while they've waited In-Between to be taken to their proper place, and it's up to Katja (the first Valkyria in centuries) to track the thief down and save the dead.</p>

<p>Shout-out to my friend Erin Jeffreys Hodges who's helped inspire me.</p>

<h2>Cast</h2>

<h3>Belinda</h3>

<p>She's a frail-looking woman in her mid-twenties, born and raised in a suburb of Stockholm. Her pale skin is covered in golden freckles, and more than a few scars, courtesy of Blutwald. Her hair is strawberry blonde and wavy, and she has dark blue eyes. Once she had vivid dreams--dreams of ancient battles on the west coast of Sweden, among other things--but Blutwald killed them. She lives with the cold, and the survivor's guilt. She shouldn't have survived.</p>

<h3>Malbrecht</h3>

<p>With broad shoulders and scars on his hands and other places, he is clearly a warrior. He has shoulder-length, dark-brown hair that's generally kept in a ponytail. His fashion sense is eccentric, preferring belted tunics to more usual western fashions. His favourite seems to be a saffron yellow one, trimmed with dark brown/pale yellow tartan. His memories are consumed by the woman he failed, and seeing Belinda he decides that he will not fail her.</p>

<h3>Katja</h3>

<p>Ambitious and driven are good words to describe her. She's a fashion designer who's just about to make it, with a penchant for strong colours that contrast beautifully with her dark brown skin and short, black hair. Though the idea of being in a committed relationship kind of freaks her out subconciously, she is coming to terms with her love for Sia, the first person she's really cared for. Yes, she loves Andrej, but they were never lovers in the romantic sense, only in the carnal.</p>

<h3>Sia</h3>

<p>Sia loves the 50s fashion, and often sews her own clothes, partly since she's grown tired of most stores not having clothes that fit her curvesome body. Her black hair is cut into a bob, and the cheerful demeanor belies the powerful rune worker--sejd woman--beneath. She is unapologetically gay, though before Katja she managed to find a long string of girlfriends who later denied ever having been into women. Where Vendela is cold and emotionless, Sia is warm and passionate, and has always been.</p>

<h3>Vendela</h3>

<p>Cold and cool, dealing with the trauma of her parents death--both through therapy and banishing the man who killed them--she is starting to warm up. Her magic is unique among the group in that it is innate, inherited from her <em>skogsrå</em> (forest guardian) great-grandmother. Feature-wise she is tall and slender, with pale skin and heavy, white-blonde locks.</p>

<h3>Andrej</h3>

<p>Sexy and predatory--if mainly unconciously--he is tall with dark hair in a ponytail, and generally wearing tailored suits. His paternal grandparents were Russian nobility, but as his father married a Swedish commoner, he rarely mentions his heritage himself. He is a wolf shifter, the power inherited from his grandmother. Before Vendela he was a playboy, but he fell hard for her, and in his family, there is such a thing as a one, true love.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1230</wp:post_id>
		<wp:post_date><![CDATA[2014-10-25 17:45:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-25 15:45:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nanowrimo-2014]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[Writing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meet my character: Katja from A Burial Ground of Dreams</title>
		<link>http://mariehogebrandt.se/articles/meet-character-katja-burial-ground-dreams/</link>
		<pubDate>Mon, 10 Nov 2014 15:54:57 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1235</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I was kindly invited to this blog hop by the utterly lovely <a href="http://candicemontgomery.wordpress.com/2014/11/03/meet-my-character-cash-gabriel-from-where-words-fail/">Candice Montgomery</a>. She also helped me settle on introducing Katja, my 'bisexual black Swedish fashion-designer-turned-Valkyria'.</p>

<h2>1) What is the name of your character?</h2>

<p>I'm Katja. And this is Gråtass, my ulv. He would never let me forget him.</p>

<p><em>Of course not. Someone has to keep you on your toes before you learn the ropes.</em></p>

<h2>2) Is he/she fictional or a historic person?</h2>

<p>Fictional, though I accepted becoming a Valkyrie at the scene of a historical labyrinth with several graves. My girlfriend's farm, Greby, exists as well, though the architecture and history is quite different.</p>

<h2>3) When and where is the story set?</h2>

<p>Modern time, mainly on the west coast of Sweden--Tanumshede and Grebbestad--but also partly in Stockholm with a few jaunts into other places in Sweden. And, not to forget, Mag Mell (an Irish kind-of paradise), Hel and on Yggdrasil itself.</p>

<h2>4) What should we know about him/her?</h2>

<p>I don't know. Born and raised in Harmånger, a bit outside of Hudiksvall in the north of Sweden. My father deserted from Vietnam when my mother ended up pregnant with my older brother. At least, that's the story he generally uses. I have a really good friend named Andrej. We used to be 'friends with benefits', but after he met Vendela I backed off.</p>

<p>I also have a lovely girlfriend, Sia. She's Vendela's BFF, and I think they were pretty much raised together.</p>

<p>I guess it might also be somewhat relevant that I'm the first Valkyria in, oh ... however long. 800 years or so? History was never my strong point, and neither deities nor ghosts are exactly precise with time. Originally I didn't know what I was signing up for. All I knew was that Andrej's a werewolf, Vendela's part skogsrå (forest guardian/nymph), Sia's a sejdkona (rune worker/seer), and the monster from Storsjön (together with a controlled mage) had kidnapped them. I just begged for something--someone--anyone to help me. Sigrun answered. (this is all part of Sia's story, the prior saga)</p>

<h2>5) What is the main conflict? What messes up his/her life?</h2>

<p>The Valkyria bits. All I wanted to do was to go on with my life. I have some really good clients, and Lora Seymore wore one of my gowns to the Oscars! But, of course, things couldn't last. Freja sent dreams of all the battles that I need to Collect in, until I gave in.</p>

<p>Collect? Oh, right. You see, most people when they die go to ... wherever they're supposed to go (heaven, hell, becoming a ghost, or whatever else per their faith or lack-thereof) without much further ado. Some don't. I've only seen cases of the descendants of the followers of the Aesir, but there's probably other poor sods out there. For instance, if you die in glorious battle--showing off being a badass--Freja or Oden are likely to want you. Just because there were no more Valkyries didn't mean this stopped. The just stopped being collected. Imagine waiting around for eternity, with your last memories being dying in war?</p>

<p>And to make things worse? Someone's taking people I am supposed to Collect, and we have no idea how that's even possible.</p>

<p>Of course, being a Valkyria has its upsides too. I can spend most nights with Sia and still be in Stockholm in the morning since my Ulv--wolf mount--can travel almost instaneously. Even through dimensions.</p>

<h2>6) What is the personal goal of the character?</h2>

<p>I want to become a famous designer. It's part of why I befriended Andrej, if we're going to be brutally honest. I stayed for the camraderie, though. And I'm glad I did, since though I'm not sure how I like the idea of getting trapped, I think that if I'll ever settle down, Sia's the one.</p>

<h2>7) Is there a working title for this novel, and can we read more about it?</h2>

<p>The working title is <em>A Burial Ground of Dreams</em>. Though some of the descriptions/information needs to be revised, you can find more <a href="/articles/nanowrimo-2014/">here</a>. Also, until the end of NaNoWriMo 2014, you can read the (very, very rough!) draft as I write it <a href="https://tablo.io/melindrea/a-burial-ground-of-dreams">on Tablo.Io</a>.</p>

<p>For some nice imagery, I've posted pictures from the setting <a href="/smaty">on this page</a></p>

<h2>8) When can we expect the book to be published or when was it published?</h2>

<p>As this is part of an ongoing series (where none of the books are completed), a publishing date is still unknown. I want at least the three first books to be more-or-less finalized when I start querying (if I decide to not go with indie publishing).</p>

<h2>Excerpt</h2>

<p>“Asgard?” Johan’s hand flew to his cross. “I am a good protestant. I belong in Heaven, with God!”</p>

<p>She shrugged, taking her time to set her shield right.</p>

<p>“I didn’t make the rules. I’m just the messenger.” She grinned. “And as you just saw, you can’t shoot the messenger.”</p>

<p>“I will die before I submit to that blasphemy!” Dropping his pistol he drew his sword. “A duel, for the soul of me and my men?”</p>

<p>Katja blinked, putting a hand on Gråtass shoulder to seek advice.</p>

<p><em>Say yes. He can’t hurt you, and the moment your axe touches him, it is over for him.</em></p>

<p>“Of course, if that is what you would like.” She dismounted. “On foot, close-combat arms only.” She’d heard of chess with death, but a duel?</p>

<p>The dead formed a circle around them, with Gråtass laying down his massive body at one end. Of course, the gaps between the dead soldiers and Gråtass showed allegiance and fear. Katja turned her axe in her hand, remembering her mentor’s words to <em>put your faith in your weapon</em>.</p>

<p>Like in the battle, the officer was on the offence, lunging with his sword. She rose her shield just in time, the twang resounding through her bones. She needed stronger arms! Her weapon ached to go, and she let it, following the arc, anticipation steel biting into flesh. Instead it slid off of his armour, weak from a moment of her hesitation. He flashed her a grin under his helmet.</p>

<p>“Gott mit uns, witch.”</p>

<p>She ignored his jibe, circling him. He circled her in return. As they both attacked and defended, a spark of excitement awoke in Katja. Her hesitancy melted in its fire. The spark reignited her faith in herself. The axe, heavy, but not too heavy, rested in her hand, pushing her on the offensive.</p>

<p>Step by step, she drove him back. He stumbled, falling on his back, his hands raising to protect himself, in vain, from the final blow.</p>

<p>Silence.</p>

<p>Johan Sköld’s was gone, and in her palm rested a beautiful jewel. She slipped it out of the way.</p>

<p>The soldiers stared at each other. Whomever struck the first blow she was not sure of, but soon it was a free-for-all. The adrenaline flooded her system as she defended herself. Trusting her body and her weapons she threw herself into the battle, collecting the dead one-by-one.</p>

<p>Silence.</p>

<p>She stood alone at the battlefield, with only bodies of the dead, and the crows coming to their feast.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1235</wp:post_id>
		<wp:post_date><![CDATA[2014-11-10 17:54:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-10 15:54:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[meet-character-katja-burial-ground-dreams]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[Writing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[meet-character]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Character Arcs by K. M. Weiland</title>
		<link>http://mariehogebrandt.se/articles/character-arcs/</link>
		<pubDate>Mon, 01 Dec 2014 05:44:32 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1242</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Links</h2>

<h3>Positive character arc</h3>

<ol>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/02/character-arcs-1.html">Intro</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/02/character-arcs-2.html">The Lie</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/02/character-arcs-3.html">Want vs Need</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/03/character-arcs-4.html">The Ghost/Wound</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/03/character-arcs-5.html">The Characteristic moment</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/03/character-arcs-6.html">The normal world</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/03/character-arcs-7.html">The first act</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/03/character-arcs-8.html">The first plot point</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/04/character-arcs-9.html">The reaction (1st half of 2nd act)</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/04/character-arcs-10.html">The midpoint</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/04/character-arcs-11.html">A strong action (2nd half of 2nd act)</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/05/character-arcs-12.html">The lowest point</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/05/creating-stunning-character-arcs-pt-13-third-act.html">The third act</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/05/character-arcs-14.html">The climax</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/05/character-arcs-15.html">The resolution</a></li>
</ol>

<h3>Flat character arc</h3>

<ol>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/06/flat-character-arc-1.html">1st act</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/06/flat-character-arc-2.html">2nd act</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/06/flat-character-arc-3.html">3rd act</a></li>
</ol>

<h3>Negative character arc</h3>

<ol>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/07/negative-character-arc-1.html">1st act</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/07/write-negative-character-arc-pt-2-second-act.html">2nd act</a></li>
<li><a href="http://www.helpingwritersbecomeauthors.com/2014/07/negative-character-arc-3.html">3rd act</a></li>
</ol>

<h2>Questions</h2>

<p>If you've already read all the links, these are the reproduced questions.</p>

<h3>Positive Character Arcs</h3>

<h4>Questions to Ask About the Lie the Character Believes</h4>

<ol>
<li><p>What misconception does your protagonist have about himself or the world?</p></li>
<li><p>What is he lacking mentally, emotionally, or spiritually, as a result?</p></li>
<li><p>How is the interior Lie reflected in the character’s exterior world?</p></li>
<li><p>Is the Lie making his life miserable when the story opens? If so, how?</p></li>
<li><p>If not, will the Inciting Event and/or the First Plot Point begin to make him uncomfortable as a result of his Lie?</p></li>
<li><p>Does your character’s Lie require any qualifiers to narrow its focus?</p></li>
<li><p>What are the symptoms of your character’s Lie?</p></li>
</ol>

<h4>Questions to Ask About the Thing the Character Wants and the Thing the Character Needs</h4>

<ol>
<li><p>How is the Lie holding your character back?</p></li>
<li><p>How is the Lie making your character unhappy or unfulfilled?</p></li>
<li><p>What Truth does your character Need to disprove the Lie?</p></li>
<li><p>How will he learn this Truth?</p></li>
<li><p>What does your character Want more than anything?</p></li>
<li><p>Is the Thing He Wants his plot goal?</p></li>
<li><p>Does he believe the Thing He Wants will solve his personal problems?</p></li>
<li><p>Is the Thing He Wants holding him back from the Thing He Needs?</p></li>
<li><p>Does the Thing He Needs preclude his gaining the Thing He Wants—or will he only be able to gain the Thing He Wants after he has found the Thing He Needs?</p></li>
<li><p>How will his life be different once he embraces the Thing He Needs?</p></li>
</ol>

<h4>Questions to Ask About Your Character’s Ghost</h4>

<ol>
<li><p>Why does your character believe the Lie?</p></li>
<li><p>Is there a notable event in his past that has traumatized him?</p></li>
<li><p>If not, will there be a notable event in the First Act that will traumatize him?</p></li>
<li><p>Why does the character nourish the Lie?</p></li>
<li><p>How will he benefit from the Truth?</p></li>
<li><p>How “big” is your character’s ghost? If you made it bigger, would you end up with a stronger arc?</p></li>
<li><p>Where will you reveal your character’s ghost? All at once early on? Or piece by piece throughout the story, with big reveal toward the end?</p></li>
<li><p>Does your story need the ghost to be revealed? Would it work better if you never revealed it?</p></li>
</ol>

<h4>Questions to Ask About Your Characteristic Moment</h4>

<ol>
<li><p>What important personality trait, virtue, or skill best sums up your protagonist?</p></li>
<li><p>How can you dramatize this trait to its fullest extent?</p></li>
<li><p>How can you dramatize this trait in a way that also introduces the plot?</p></li>
<li><p>How can you demonstrate your protagonist’s belief in his Lie?</p></li>
<li><p>Can you reveal or hint at his Ghost?</p></li>
<li><p>How can you use this scene to reveal your character’s overall story goal—the Thing He Wants Most?</p></li>
<li><p>Does your protagonist’s pursuit of both the story goal and the scene goal meet with an obvious obstacle (i.e., conflict)?</p></li>
<li><p>How can you share important details about your protagonist (name, age, physical appearance) quickly and unobtrusively?</p></li>
</ol>

<h4>Questions to Ask About the Normal World</h4>

<ol>
<li><p>What setting will open your story?</p></li>
<li><p>How will this setting change at the First Plot Point?</p></li>
<li><p>How can you contrast the Normal World with the “adventure world” to follow?</p></li>
<li><p>How does the Normal World dramatize or symbolize your character’s enslavement to the Lie?</p></li>
<li><p>How is the Normal World causing or empowering the Lie?</p></li>
<li><p>Why is your character in the Normal World?</p></li>
<li><p>If your character doesn’t want to leave the Normal World, what is helping him mask the discomfort caused by his Lie?</p></li>
<li><p>If your character wants to leave, what’s stopping him?</p></li>
<li><p>Will the character return to the Normal World at the end of the story?</p></li>
<li><p>If the Normal World is a legitimately good place, how will the protagonist need to change in order to appreciate it?</p></li>
</ol>

<h4>Questions to Ask About the First Plot Point in Your Character’s Arc</h4>

<ol>
<li><p>What major event will slam into your character’s Normal World and force him to alter his original plans?</p></li>
<li><p>What decision will lead your protagonist to the First Plot Point?</p></li>
<li><p>Will the First Plot Point seem favorable? If so, how will the complications turn out to be worse than the protagonist expected?</p></li>
<li><p>Or will this event be obviously disastrous?</p></li>
<li><p>Will the protagonist willingly embrace the First Plot Point and walk into the Second Act under his own power?</p></li>
<li><p>Or will he have to be dragged, kicking and screaming, through the gateway between acts?</p></li>
<li><p>Will the First Plot Point destroy the Normal World? Or will it physically remove your character from the Normal World? Or will it warp the Normal World around the protagonist?</p></li>
<li><p>How will your character react to the First Plot Point?</p></li>
<li><p>What new plot goal will the character form in response to the First Plot Point?</p></li>
<li><p>How will the First Plot Point put your character’s feet on the path to his new Truth?</p></li>
<li><p>How will the First Plot Point create a new world in which the character will be “punished” for acting according to his Lie?</p></li>
</ol>

<h4>Questions to Ask About Your Character’s Arc in the First Half of the Second Act</h4>

<ol>
<li><p>How is your character reacting to the First Plot Point?</p></li>
<li><p>What “tools” can you provide to help your character build the first rung in the ladder that will scale his Lie?</p></li>
<li><p>What minor character can offer advice or exemplary behavior to help mentor your protagonist?</p></li>
<li><p>How can you show the character the first step in overcoming his Lie, instead of just telling him about it?</p></li>
<li><p>How will your character attempt to use his Lie to solve plot problems?</p></li>
<li><p>How will he be “punished” as a result?</p></li>
<li><p>How will these failures evolve your character’s outlook and tactics?</p></li>
<li><p>How will your character’s single-minded pursuit of his plot goal lead him closer to the Thing He Wants?</p></li>
<li><p>How will his pursuit of the Thing He Wants cause him to risk turning farther away from the Thing He Needs?</p></li>
<li><p>After the First Plot Point, how will the new world or the altered Normal World provide the character with a glimpse of how life might be without his Lie?</p></li>
</ol>

<h4>Questions to Ask About Your Character’s Arc in the Midpoint</h4>

<ol>
<li><p>What personal revelation strikes your protagonist at the Midpoint?</p></li>
<li><p>How is your protagonist different at the Midpoint from who he was at the First Plot Point?</p></li>
<li><p>How does the revelation at the Midpoint prompt the character to move from reaction to action by providing him the knowledge to start taking control of the conflict?</p></li>
<li><p>What definitive action will your protagonist take against the antagonistic force?</p></li>
<li><p>What new understanding of the conflict does the protagonist gain at the Midpoint?</p></li>
<li><p>What new understanding of himself does the protagonist gain at the Midpoint?</p></li>
<li><p>What is his moment of grace? What Truth does he recognize and accept? What causes him to accept it?</p></li>
<li><p>How is your character still consciously clinging to his Lie?</p></li>
<li><p>What actions is he taking that are based on the Truth?</p></li>
<li><p>How does the contrast between the simultaneously held Lie and Truth evolve his inner conflict?</p></li>
</ol>

<h4>Questions to Ask About Your Character’s Arc in the Second Half of the Second Act</h4>

<ol>
<li><p>How is your character starting to take control of the conflict after the Midpoint?</p></li>
<li><p>How is the revelation at the Midpoint allowing your character to see the conflict in a new light?</p></li>
<li><p>What “tools” has the Midpoint revelation given your character that make him more effective in confronting the antagonist?</p></li>
<li><p>How is your character still clinging to his Lie?</p></li>
<li><p>How is his new Truth causing friction with his old Lie?</p></li>
<li><p>How is your character still out of sync with the Truth?</p></li>
<li><p>How does your character’s mindset still support the Lie?</p></li>
<li><p>How do his actions demonstrate his growing belief in the Truth?</p></li>
<li><p>How can you use a “before and after” scene to prove how your character is different from who he was in the first half of the story?</p></li>
<li><p>What false victory will end the Second Act? How has your character compromised the Truth in order to (seemingly) gain the Thing He Wants?</p></li>
<li><p>How have you blatantly demonstrated the Truth somewhere in the Second Half of the Second Act?</p></li>
</ol>

<h4>Questions to Ask About Your Character’s Arc in the Third Plot Point</h4>

<ol>
<li><p>What crushing event and/or revelation turns your character’s apparent success into the worst defeat yet?</p></li>
<li><p>How was this defeat enabled by the character’s refusal, thus far, to completely reject his Lie?</p></li>
<li><p>How does this defeat force your character to face the true ramifications of the Lie?</p></li>
<li><p>How can this defeat offer the character a clear path toward the Thing He Wants?</p></li>
<li><p>If he takes this path, how will it force him to reject the Thing He Needs?</p></li>
<li><p>How can you set up a clear and decided choice between the Thing He Needs and the Thing He Wants?</p></li>
<li><p>Which will he choose?</p></li>
<li><p>How can you literally or symbolically represent death in this scene as a way of reinforcing the demise of your character’s Lie-empowered old self?</p></li>
</ol>

<h4>Questions to Ask About Your Character’s Arc in the Third Act</h4>

<ol>
<li><p>How does your character react to the Third Plot Point?</p></li>
<li><p>How has his embrace of the Truth made a mess of his life and, specifically, his pursuit of his plot goal?</p></li>
<li><p>How can you up the stakes by forcing him into physical, as well as emotional, straits?</p></li>
<li><p>How do these straits force your character to reconsider whether or not the Truth is the right choice for him?</p></li>
<li><p>How does he rise from these doubts determined to cling to the Truth?</p></li>
<li><p>What doubts is the character still experiencing about the Truth?</p></li>
<li><p>How is his inability to completely reject the Lie keeping him from total happiness and empowerment?</p></li>
<li><p>How are your character’s attitudes and actions different in the Third Act from how they were in the First? How can you subtly reinforce the difference prior to the Climax?</p></li>
<li><p>How will your character’s devotion to the Truth be put to the test? What character or situation will you use to try to tempt or bully your protagonist back into serving the Lie?</p></li>
</ol>

<h4>Questions to Ask About Your Character’s Arc in the Climax</h4>

<ol>
<li><p>How does your character prove he is a changed person in the Climax?</p></li>
<li><p>Does the renewed attack upon his new Truth happen before the Climax or during the Climax? What are the pacing challenges of either choice?</p></li>
<li><p>How does the character’s final embrace of the Truth enable his victory in the exterior conflict?</p></li>
<li><p>Does he fully embrace the Thing He Needs in the Climax?</p></li>
<li><p>How does he use the Thing He Needs to defeat the antagonist?</p></li>
<li><p>Does he gain the Thing He Wants?</p></li>
<li><p>How has his view of the Thing He Wants changed? Does he still want it?</p></li>
</ol>

<h4>Questions to Ask About Your Character’s Arc in the Resolution</h4>

<ol>
<li><p>How does your Resolution contrast your story’s beginning?</p></li>
<li><p>How does your Resolution mirror your story’s beginning?</p></li>
<li><p>How is the character’s new Normal World different from the original one?</p></li>
<li><p>Does the character return to his old Normal World?</p></li>
<li><p>How does the Resolution answer your story’s thematic question?</p></li>
<li><p>How can you state the answer to the thematic question in dialogue without making it seem like a “moral of the story”?</p></li>
<li><p>How does your character act differently in the Resolution from how he did at the beginning of the story?</p></li>
</ol>

<h3>Flat Character Arc</h3>

<h4>Questions to Ask About the First Act in a Flat Character Arc</h4>

<ol>
<li><p>What Truth does your character already believe at the beginning of your story?</p></li>
<li><p>Does he have a Ghost in his backstory that prompted this belief?</p></li>
<li><p>What Lie, as represented by the antagonistic force, will he have to fight?</p></li>
<li><p>Does his Normal World represent the Truth he will be fighting to protect—or does it represent the Lie he must overthrow in order to establish the Truth?</p></li>
<li><p>If the former, how can you illustrate the encroaching threat of the Lie upon that Normal World?</p></li>
<li><p>When will your protagonist first become aware of the threat of the Lie?</p></li>
<li><p>Is the protagonist initially reluctant to engage in a battle with the Lie?</p></li>
<li><p>If he is already committed to battling the Lie, what obstacles in the First Act prevent him from a full-on confrontation with the Lie?</p></li>
<li><p>What Characteristic Moment can you use to illustrate your character’s devotion to the Truth—and the resultant knowledge and skills he is able to wield?</p></li>
<li><p>How can your opening illustrate the Lie that opposes the protagonist?</p></li>
<li><p>Throughout the First Act, how can you use the Lie to prove what is at stake for the protagonist?</p></li>
</ol>

<h4>Questions to Ask About the Second Act in a Flat Character Arc</h4>

<ol>
<li><p>How does the First Plot Point force your character into a direct confrontation with the Lie?</p></li>
<li><p>Does he willingly confront the Lie—or does he confront it only because he has no other choice?</p></li>
<li><p>How will the character be tempted away from his Truth?</p></li>
<li><p>How close will he come to actually abandoning the Truth and embracing the Lie?</p></li>
<li><p>What allies will initially resist his devotion to the Truth?</p></li>
<li><p>How will those allies eventually be changed by the Truth?</p></li>
<li><p>How will his enemies resist his Truth?</p></li>
<li><p>How will those enemies become even more entrenched in the Lie as a result?</p></li>
<li><p>Is the character’s main plot goal directly related to defeating the Lie in the world around him?</p></li>
<li><p>If not, why will he have to overcome the Lie in order to reach his main plot goal?</p></li>
<li><p>What doesn’t the character understand about the Lie in the first half of the story?</p></li>
<li><p>What important information will he learn about the Lie and the antagonistic force at the Midpoint?</p></li>
<li><p>How can he offer a “moment of grace,” via his Truth, either generally to the world around him or specifically to his allies and/or the antagonist?</p></li>
<li><p>At the Midpoint, what weakness does the protagonist find in the Lie that he can exploit in the second half?</p></li>
</ol>

<h4>Questions to Ask About the Third Act in a Flat Character Arc</h4>

<ol>
<li><p>How is the Truth now evident in the lives of the previously Lie-driven supporting characters?</p></li>
<li><p>What defeat will nearly break your protagonist—physically, emotionally, or both—at the Third Plot Point?</p></li>
<li><p>How can he face death—literally or figuratively—in the Third Plot Point?</p></li>
<li><p>How can you make this defeat as personal as possible for the protagonist?</p></li>
<li><p>How will your protagonist doubt his ability to conquer the Lie—without actually doubting the Truth itself?</p></li>
<li><p>How will he overcome this doubt? Will supporting characters encourage him—or will he encourage them?</p></li>
<li><p>How will you indicate your protagonist’s re-dedication of himself to the Truth after his defeat at the Third Plot Point?</p></li>
<li><p>Can you offer an outright statement of the conflict’s foundational “Lie vs. Truth” premise?</p></li>
<li><p>Why will the Truth be intrinsic to the protagonist’s ability to physically defeat the antagonist?</p></li>
<li><p>How can minor characters’ new grip on the Truth support your protagonist’s final attack on the Lie without stealing the limelight from him?</p></li>
<li><p>How will the Resolution prove the changes created by the protagonist and his Truth?</p></li>
<li><p>Will the world be different from how it was in the beginning—or will the protagonist return to the same world he was originally forced to leave?</p></li>
<li><p>Which of the supporting characters will manifest the Truth in the Resolution?</p></li>
<li><p>Will the protagonist demonstrate any exterior or personal differences from who he was at the beginning of the story?</p></li>
<li><p>How can you reinforce that his core Truth has not changed at all?</p></li>
</ol>

<h3>Negative character arc</h3>

<h4>Questions to Ask About the First Act in a Negative Character Arc</h4>

<ol>
<li>Will your protagonist fuilfill a disillusionment arc, a fall arc, or a corruption arc?</li>
<li>What Lie will your character fall prey to?</li>
<li>How does this Lie manifest in the beginning of your story?</li>
<li>How does the Truth manifest in the character (in a disillusionment arc) or in the world around him in?</li>
<li>How is the character devaluing the Truth in the beginning of the story?</li>
<li>What Ghost is influencing the character’s belief in or proclivity toward the Lie?</li>
<li>What is the Thing the Character Needs?</li>
<li>What is the Thing the Character Wants?</li>
<li>If you’re using a disillusionment arc, why does the Lie’s Normal World appeal to the character?</li>
<li>If you’re using a fall arc, how is the character already entrenched in the Lie’s Normal World? Why has he not yet made a move to escape this Normal World?</li>
<li>If you’re using a corruption arc, how is the character’s Normal World nourished by the Truth? Why is the character still less than comfortable in this world?</li>
<li>How can you use the Characteristic Moment to introduce your character’s proclivity toward the Lie?</li>
<li>What is at stake for the character if he chooses to follow the Lie?</li>
<li>What is at stake for the character if he chooses to follow the Truth?</li>
</ol>

<h4>Questions to Ask About the Negative Character Arc in the Second Act</h4>

<ol>
<li><p>What is your character’s great fault in the beginning of your story (e.g., lust, hatred, etc.)?</p></li>
<li><p>How does the First Plot Point initially seem to be a good thing?</p></li>
<li><p>How is the character’s eventual descent foreshadowed even amid the positive aspects of the First Plot Point?</p></li>
<li><p>In the First Half of the Second Act, what is hampering the character from gaining the Thing He Wants Most?</p></li>
<li><p>If you’re writing a disillusionment arc, what is your character learning about the Lie in the First Half of the Second Act?</p></li>
<li><p>If you’re writing a fall arc, how is your character suffering for his devotion to the Lie?</p></li>
<li><p>If you’re writing a corruption arc, why is your character growing more and more enamored with the Lie?</p></li>
<li><p>At the Midpoint, what moment of grace gives your character an opportunity to embrace the Truth? Why and how does he reject it?</p></li>
<li><p>How is your character actively and aggressively using the Lie to pursue the Thing He Wants in the Second Half of the Second Act?</p></li>
<li><p>In the Second Half of the Second Act, how is the character evolving into the worst possible manifestation of his initial great fault?</p></li>
</ol>

<h4>Questions to Ask About the Negative Character Arc in the Third Act</h4>

<ol>
<li><p>How will your character fail in the story’s end?</p></li>
<li><p>How will his actions irrevocably damage others?</p></li>
<li><p>What tragedy will confront your protagonist at the Third Plot Point?</p></li>
<li><p>How will your character react to the Third Plot Point?</p></li>
<li><p>Why does your character’s refusal to embrace the Truth render him powerless to rise from the Third Plot Point better equipped to deal with both his inner and outer conflict?</p></li>
<li><p>What less-than-ideal (and possibly even downright evil) plan will your protagonist come up with for confronting the antagonistic force and gaining the Thing He Wants?</p></li>
<li><p>Will supporting characters try to reason with your protagonist? How will he respond?</p></li>
<li><p>In the Climax, will your character gain the Thing He Wants? If so, why will he realize his victory is still a hollow one? How will he react?</p></li>
<li><p>Alternatively, will your character fail to gain his ultimate goal? How will he react?</p></li>
<li><p>After his failure in the Climax, will your character at least momentarily realize the Truth and confront the futility of his actions?</p></li>
<li><p>How are your character’s actions in the Climax a magnified reflection of his Lie in the beginning of the story?</p></li>
<li><p>How does your Resolution show the effect of your protagonist’s actions upon supporting characters and the world-at-large?</p></li>
<li><p>Will you end on a hopeful note or a despairing note? Why?</p></li>
<li><p>How does your closing scene underline the character’s ultimate failure?</p></li>
</ol>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Links to K. M. Weiland's posts on character arcs, as well as questions]]></excerpt:encoded>
		<wp:post_id>1242</wp:post_id>
		<wp:post_date><![CDATA[2014-12-01 07:44:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-01 05:44:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[character-arcs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="characters"><![CDATA[characters]]></category>
		<category domain="category" nicename="writing"><![CDATA[Writing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[character-arcs-k-m-weiland]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing Process</title>
		<link>http://mariehogebrandt.se/articles/writing-process/</link>
		<pubDate>Mon, 01 Dec 2014 06:03:24 +0000</pubDate>
		<dc:creator><![CDATA[marie]]></dc:creator>
		<guid isPermaLink="false">http://mariehogebrandt.se/?p=1246</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Initial idea</h2>

<p>The first step is the most random one, and the end result may or may not have anything in common with the planted seed. It can be based on a character (<em>what if a woman 'woke up' dead, insistant on finding her killer</em>), on a myth (<em>I love the legends of the Scottish warriors!</em>), on a situation (<em>a killer is after the main character!</em>), or even a reaction (<em>I hate how the huge majority of sexually submissive men in pop culture are written as freaks, and that the 'initiation into BDSM' is to a large extent a more-or-less emotionless man coercing a sexually inexperienced woman into submission</em>).</p>

<p>After I have that initial idea, I discuss it. At first with my partner, just prodding it to see if it's workable. The first idea I mentioned above I discarded, because it needed to be written in 1st person (a Noir story). The second is my current work-in-progress (WIP), the third is another book in the series that my WIP is in, and the fourth I started but discarded because I want to wait until I've finished some of my other stories.</p>

<h2>Framework for the plot</h2>

<p>Once I have enough to work on it at all--character ideas, at least one of the big things that'll happen--I sit down and start with a very loose outline. With <a href="http://www.writehacked.com/writing/learn-structure-novel-five-minutes/">this article</a> as a base, I figure out the broad strokes of where things are leading.</p>

<p>This doesn't work for everyone, I know that. One reason it does for me is that most of the plot points are separate from the characters: they're initiated by an external agent.</p>

<p>By broad strokes I mean something like this:</p>

<ul>
<li>Hook: (To be figured out)</li>
<li>Inciting event: Her parents (before story starts)</li>
<li>Key event: She meets her new flirt object</li>
<li>1st plot point: The first threatening letter is sent</li>
<li>Reaction: Denial that there's something wrong/pretending it's a prank</li>
<li>Midpoint: She finds out that it isn't her ex who's sending them</li>
<li>Action: Suspicion/fear about her new beau being behind it, gathering evidence</li>
<li>3rd plot point: She realises that the person who sent the letters is the same person that killed her parents</li>
<li>Climax: They go after the killer and win</li>
</ul>

<p>As you can see, that's not really stating much, but it gives a few important places I need to get to while writing.</p>

<h2>Character stories</h2>

<p>One way that I explore what will happen (especially if there's several point of views) is to sit down with the characters and let them tell me (aka, free-writing as one particular character (minor or major) in 1st person past tense). This gives me something to go on, generally gets my creative juices flowing and--most importantly--gives me a feel for their voices.</p>

<p>How long these stories are depends on the part the character plays. They often explain backstory as well, and why they (re)acted the way they did, so for a major character between 2-4 pages. For a minor character, generally 1-2 pages.</p>

<p>By giving the minor character a voice as well, it helps me characterize them in better ways. To get to know them as well, which gives them more life.</p>

<h2>First draft time!</h2>

<p>With the outline in mind, I start working on writing, scene by scene. Scene by scene, rather than chapter by chapter? Yes. I don't organize into chapters until very late in the draft, maybe even not until the second draft. A change in point of view is always a change in scene, so's a serious change in locale or time.</p>

<p>I write this with the knowledge that I always skip scenes that should've been there, not because I don't want to write them, but because I'm so much 'in the zone' that I don't consider that the readers won't be.</p>

<h2>Re-working the outline</h2>

<p>With a finished first draft in hand, I use the above site on structuring to check if the outline is still true. If not, I'll adjust it.</p>

<p>In my latest WIP I found myself juggling three major storylines and two minor, so I outlined each storyline by itself, matching the points up to the earliest in time (1st plotpoint), latest in time (climax) and lowest point, with the midpoint still undecided--probably a combination of them.</p>

<p>This is also the time for me to map out the character arcs. K.M. Weiland has a really good series on how to write good character arcs. However, as she has quite a few posts on quite a few topics, I reproduced <a href="/articles/character-arcs">links to her character arc posts</a>, as well as the questions you're recommended to pose to yourself about your character's arc.</p>

<p>In the example of the above mentioned WIP, one of the major storylines is a character arc, as the character is recovering from trauma. The two minor tie into the other point of view characters' arcs, empowering them.</p>

<h2>2nd draft</h2>

<p>Keeping the outline in mind, I go through the scenes and read things as if I hadn't seen them before. That's when I'll note huge chunks that are missing (such as character development, relationship development, or the lack of mentioning of the gun in Act I). I'll add empty scenes (or even full chapters) in my Scrivener outline, with a note on what I need to go through.</p>

<p>If I see scenes that are not useful at all, I'll move the text to a specific 'dump folder' outside the draft, to not remove anything written. That actually ended up very useful during NaNoWriMo, as I started a scene, decided it wasn't useful, and then moved on. Later, that beginning of a scene came very much in handy.</p>

<h2>Subsequent drafts</h2>

<p>I have already <a href="/articles/self-editing">covered my self-editing process</a>, though that article will need to be revised in the view of this current one, as they cover the same territory in places. I will do that at a later point!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[As I've seen how other people work, I've decided that it's time to share my process, from initial idea to a finished story.]]></excerpt:encoded>
		<wp:post_id>1246</wp:post_id>
		<wp:post_date><![CDATA[2014-12-01 08:03:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-01 06:03:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[writing-process]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="writing"><![CDATA[Writing]]></category>
		<category domain="post_tag" nicename="writing-process"><![CDATA[writing process]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[field_12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

Page Caching using disk: enhanced
Minified using disk (wp-admin)
Database Caching using disk (Request-wide wp-admin)

 Served from: mariehogebrandt.se @ 2017-03-17 14:09:39 by W3 Total Cache -->